package pe.gob.mininter.dirandro.vaadin.util;

import java.io.ByteArrayOutputStream;
import java.io.OutputStream;

import org.apache.commons.lang.StringUtils;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.Button;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.ProgressIndicator;
import com.vaadin.ui.Upload;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.Upload.FailedEvent;
import com.vaadin.ui.Upload.FailedListener;
import com.vaadin.ui.Upload.FinishedEvent;
import com.vaadin.ui.Upload.FinishedListener;
import com.vaadin.ui.Upload.ProgressListener;
import com.vaadin.ui.Upload.Receiver;
import com.vaadin.ui.Upload.StartedEvent;
import com.vaadin.ui.Upload.StartedListener;
import com.vaadin.ui.Upload.SucceededEvent;
import com.vaadin.ui.Upload.SucceededListener;

public class UploadDirandro extends CustomComponent implements Receiver, ClickListener, StartedListener, ProgressListener, SucceededListener, FailedListener, FinishedListener {

	@AutoGenerated
	private HorizontalLayout mainLayout;

	@AutoGenerated
	private Button btnCancelar;

	@AutoGenerated
	private ProgressIndicator pi;

	@AutoGenerated
	private Label lblEstado;

	@AutoGenerated
	private Upload upload;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/**
	 * 
	 */
	private static final long serialVersionUID = 8326373966893622122L;
	
	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private String filename;
	private String mimeType;	
	private OutputStream outputStream;
	private long sizeFile;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public UploadDirandro() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		
		outputStream = new ByteArrayOutputStream();
		btnCancelar.addListener((ClickListener) this);
		upload.setImmediate(true);
		upload.setButtonCaption("Cargar");
		upload.addListener((StartedListener)this);
		upload.addListener((ProgressListener)this);
		upload.addListener((SucceededListener)this);
		upload.addListener((FailedListener)this);
		upload.addListener((FinishedListener)this);
		upload.setReceiver((Receiver) this);
		setCargando(false);
	}
	
	@Override
	public OutputStream receiveUpload(String filename, String mimeType) {
		this.filename = filename;
		this.mimeType = mimeType;
		outputStream = new ByteArrayOutputStream();
		return outputStream;
	}



	@Override
	public void uploadFinished(FinishedEvent event) {
		setCargando(false);
	}

	@Override
	public void uploadFailed(FailedEvent event) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void uploadSucceeded(SucceededEvent event) {
		lblEstado.setValue(StringUtils.join(new Object[]{filename, " (", mimeType, ") - ", FileLenghtFormat.convertToStringRepresentation(sizeFile) }));
	}

	@Override
	public void updateProgress(long readBytes, long contentLength) {
		pi.setValue(new Float(readBytes / (float) contentLength));
		sizeFile=contentLength;
	}

	@Override
	public void uploadStarted(StartedEvent event) {
		pi.setValue(0f);
		lblEstado.setValue("");
        pi.setPollingInterval(500);
        setCargando(true);
	}
	
	@Override
	public void buttonClick(ClickEvent event) {
		if(event.getButton().equals(btnCancelar)) {
			upload.interruptUpload();
			setCargando(false);
		}
	}
	
	private void setCargando(boolean flag) {
		btnCancelar.setVisible(flag);
		pi.setVisible(flag);
		lblEstado.setVisible(!flag);
	}

	public String getFilename() {
		return filename;
	}

	public String getMimeType() {
		return mimeType;
	}
	
	public long getSizeFile() {
		return sizeFile;
	}

	public OutputStream getOutputStream() {
		return outputStream;
	}
	
	public abstract static class FileLenghtFormat{
		
		private static final long K = 1024;
		private static final long M = K * K;
		private static final long G = M * K;
		private static final long T = G * K;

		public static String convertToStringRepresentation(final long value){
		    final long[] dividers = new long[] { T, G, M, K, 1 };
		    final String[] units = new String[] { "TB", "GB", "MB", "KB", "B" };
		    if(value < 1){
		        throw new IllegalArgumentException("TamaÃ±o de archivo invalido: " + value);
		    }
		    String result = null;
		    for(int i = 0; i < dividers.length; i++){
		        final long divider = dividers[i];
		        if(value >= divider){
		            result = format(value, divider, units[i]);
		            break;
		        }
		    }
		    return result;
		}

		private static String format(final long value,
		    final long divider,
		    final String unit){
		    final double result =
		        divider > 1 ? (double) value / (double) divider : (double) value;
		    return String.format("%.1f %s", Double.valueOf(result), unit);
		}
	}

	@AutoGenerated
	private HorizontalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new HorizontalLayout();
		mainLayout.setImmediate(true);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// upload
		upload = new Upload(null, (Receiver) this);
		upload.setImmediate(true);
		upload.setWidth("-1px");
		upload.setHeight("-1px");
		mainLayout.addComponent(upload);
		
		// lblEstado
		lblEstado = new Label();
		lblEstado.setImmediate(false);
		lblEstado.setWidth("-1px");
		lblEstado.setHeight("-1px");
		mainLayout.addComponent(lblEstado);
		
		// pi
		pi = new ProgressIndicator();
		pi.setCaption("Cargando...");
		pi.setImmediate(true);
		pi.setWidth("-1px");
		pi.setHeight("-1px");
		mainLayout.addComponent(pi);
		
		// btnCancelar
		btnCancelar = new Button();
		btnCancelar.setCaption("Cancelar");
		btnCancelar.setImmediate(true);
		btnCancelar.setWidth("-1px");
		btnCancelar.setHeight("-1px");
		mainLayout.addComponent(btnCancelar);
		
		return mainLayout;
	}	

}
