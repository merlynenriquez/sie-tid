package pe.gob.mininter.dirandro.vaadin.panel;

import java.math.BigDecimal;
import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;

import pe.gob.mininter.dirandro.model.DetPerInmExp;
import pe.gob.mininter.dirandro.model.Expediente;
import pe.gob.mininter.dirandro.model.Inmueble;
import pe.gob.mininter.dirandro.model.Persona;
import pe.gob.mininter.dirandro.model.Valor;
import pe.gob.mininter.dirandro.service.ExpedienteInmuebleService;
import pe.gob.mininter.dirandro.service.ExpedienteService;
import pe.gob.mininter.dirandro.service.InmuebleService;
import pe.gob.mininter.dirandro.service.PersonaService;
import pe.gob.mininter.dirandro.util.Constante;
import pe.gob.mininter.dirandro.util.HarecUtil;
import pe.gob.mininter.dirandro.vaadin.dialogs.AlertDialog;
import pe.gob.mininter.dirandro.vaadin.util.ComboBoxLOVS;
import pe.gob.mininter.dirandro.vaadin.util.Injector;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.data.util.IndexedContainer;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;

public class PanelRegistroParteInmueble extends CustomComponent implements ClickListener  {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
	
	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private VerticalLayout pnlInmuebles;
	@AutoGenerated
	private VerticalLayout pnlInmueblesBody;
	@AutoGenerated
	private Table tblInmuebles;
	@AutoGenerated
	private Button btnInmAgregar;
	@AutoGenerated
	private HorizontalLayout pnlInmueblesBody4;
	@AutoGenerated
	private ComboBoxLOVS cmbInmSituacion;
	@AutoGenerated
	private TextField txtInmNumeroPisos;
	@AutoGenerated
	private TextField txtInmTipodeUso;
	@AutoGenerated
	private HorizontalLayout pnlInmueblesBody3;
	@AutoGenerated
	private ComboBox cmbInmPropietario;
	@AutoGenerated
	private VerticalLayout pnlInmueblesBody2;
	@AutoGenerated
	private HorizontalLayout pnlInmueblesBody2_2;
	@AutoGenerated
	private TextField txtInmUbicacion;
	@AutoGenerated
	private TextField txtInmUrbanizacion;
	@AutoGenerated
	private HorizontalLayout pnlInmueblesBody2_1;
	@AutoGenerated
	private TextField txtInmDireccion;
	@AutoGenerated
	private TextField txtInmTipoDireccion;
	@AutoGenerated
	private TextField txtInmCodigo;
	@AutoGenerated
	private HorizontalLayout pnlInmueblesBody1;
	@AutoGenerated
	private Button btnInmRegistrar;
	@AutoGenerated
	private ComboBox cmbInmInmueble;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */

	private static final long serialVersionUID = -4639683924066371051L;
	private static final Logger logger = Logger.getLogger(PanelRegistroParteInmueble.class);
	
	private ExpedienteInmuebleService expedienteInmuebleService;
	private PersonaService personaService;
	private InmuebleService inmuebleService;
	
	private PanelAgregarInmueble pnlAgregarInmueble;
	private Expediente expediente;
	private DetPerInmExp inmueble; 
	private boolean flagNuevaEstado;
	private List<Persona> lstPersonas;
	private List<Inmueble> lstInmuebles;
	
	public PanelRegistroParteInmueble() {
		buildMainLayout();
		expedienteInmuebleService = Injector.obtenerServicio(ExpedienteInmuebleService.class);
		personaService = Injector.obtenerServicio(PersonaService.class);
		inmuebleService = Injector.obtenerServicio(InmuebleService.class);
		setCompositionRoot(mainLayout);
		expediente = new Expediente();
		postConstruct();
	}

	public void setExpediente(Expediente expediente) {
		this.expediente = expediente;
	}
	
	public void postConstruct() {
		

		ExpedienteService expedienteService = Injector.obtenerServicio(ExpedienteService.class);
		expediente=expedienteService.obtener(1l);
	
		
		lstPersonas = personaService.buscar( null );
		actualizarInmuebles();
		
		txtInmCodigo.setEnabled(false);
		txtInmTipoDireccion.setEnabled(false);
		txtInmDireccion.setEnabled(false);
		txtInmUrbanizacion.setEnabled(false);
		txtInmUbicacion.setEnabled(false);
		
		cmbInmSituacion.setInputPrompt("Situacion");
		cmbInmSituacion.setCodigoLista(Constante.LISTA.CODIGO.SITUACION_GENERAL);
		
		cmbInmInmueble.setImmediate(true);
		cmbInmInmueble.setInputPrompt("Inmueble");
		cmbInmInmueble.setItemCaptionPropertyId("direccion");
		//cmbInmInmueble.setContainerDataSource(new BeanItemContainer<Inmueble>(Inmueble.class,  lstInmuebles));
		cmbInmInmueble.addListener( new ValueChangeListener() {
			private static final long serialVersionUID = -6213576334461528840L;
			@Override
			public void valueChange(ValueChangeEvent event) {
				cambiaCombo( event );
			}			
		});
		
		cmbInmPropietario.setInputPrompt("Propietario");
		cmbInmPropietario.setItemCaptionPropertyId("nombreCompleto");
		cmbInmPropietario.setContainerDataSource(new BeanItemContainer<Persona>(Persona.class,  lstPersonas));
		
		tblInmuebles.setSelectable(true);
		tblInmuebles.setImmediate(true);
		tblInmuebles.setNullSelectionAllowed(true);
		tblInmuebles.setNullSelectionItemId(null);
		tblInmuebles.addListener(new ValueChangeListener() {
			
			private static final long serialVersionUID = 7962790507398071986L;

			@Override
			public void valueChange(ValueChangeEvent event) {
				boolean esModoNuevo = tblInmuebles.getValue() == null;
				limpiar();
				if(esModoNuevo){
					tblInmuebles.setValue(null);
					habilitarEdicion(false);
				}else{
					habilitarEdicion(true);
					Item item = tblInmuebles.getItem(tblInmuebles.getValue());
					
					inmueble.setId((Long) item.getItemProperty("id").getValue());
					txtInmCodigo.setValue(item.getItemProperty("inmueble.id").getValue());
					txtInmDireccion.setValue(item.getItemProperty("inmueble.direccion").getValue());
					txtInmUrbanizacion.setValue(item.getItemProperty("inmueble.urbanizacion").getValue());
					txtInmUbicacion.setValue(item.getItemProperty("inmueble.ubicacion").getValue());
					txtInmTipoDireccion.setValue(item.getItemProperty("inmueble.ubicacion").getValue());
					txtInmTipodeUso.setValue(item.getItemProperty("tipoUso").getValue());
					txtInmNumeroPisos.setValue(item.getItemProperty("pisos").getValue());
					//TODO cambiar el combo de personas para que no sea una lista porque cargara mucho al sistema
					for (Persona persona : lstPersonas) {
						if (persona.getId().equals((Long) item.getItemProperty("propietario.id").getValue())) {
							cmbInmPropietario.select(persona);
							break;
						}
					}
					for (Inmueble inmueble : lstInmuebles) {
						if (inmueble.getId().equals((Long) item.getItemProperty("inmueble.id").getValue())) {
							cmbInmInmueble.select(inmueble);
							break;
						}
					}
					cmbInmSituacion.select(new Valor( (Long) item.getItemProperty("situacion.id").getValue() ));
				}
			}
		});	
		
		btnInmAgregar.addListener((ClickListener)this);
		btnInmRegistrar.addListener((ClickListener)this);
		refrescar();
	}
	
	public void actualizarInmuebles(){
		lstInmuebles = inmuebleService.buscar(null);
		cmbInmInmueble.setContainerDataSource(new BeanItemContainer<Inmueble>(Inmueble.class,  lstInmuebles));
	}

	private void cambiaCombo(ValueChangeEvent event) {
		if( cmbInmInmueble.getValue() != null){
			Inmueble parSel = (Inmueble)cmbInmInmueble.getValue();
			txtInmCodigo.setValue(parSel.getId());
			txtInmTipoDireccion.setValue(parSel.getTipoDireccion()!=null?parSel.getTipoDireccion().getNombre():StringUtils.EMPTY);
			txtInmDireccion.setValue(parSel.getDireccion());
			txtInmUrbanizacion.setValue(parSel.getUrbanizacion());
			txtInmUbicacion.setValue(parSel.getUbgDistrito()!=null?parSel.getUbgDistrito().getNombreCompleto():StringUtils.EMPTY);
		}
	}
	
	@Override
	public void buttonClick(ClickEvent event) {
		if(event.getButton().equals( btnInmRegistrar )){
			
			pnlAgregarInmueble = new PanelAgregarInmueble(1L);
			pnlAgregarInmueble.setPadre(this);
			Window window=new Window(){
				
				private static final long serialVersionUID = 1L;

				  protected void close() {
					  getApplication().getMainWindow().removeWindow(getWindow());
				  }};
			window.setCaption("Registrar Inmueble");
			window.addComponent(pnlAgregarInmueble);
			window.setModal(true);
			window.setResizable(false);
			window.setWidth("550px");
			window.setHeight("-1px");
			getWindow().addWindow(window);
		}
		
		if(event.getButton().equals(btnInmAgregar)){
			
			inmueble.setNumeroPisos(new BigDecimal(txtInmNumeroPisos.getValue().toString()));
			inmueble.setInmueble((Inmueble)cmbInmInmueble.getValue());
			inmueble.setExpediente(expediente);
			inmueble.setPropietario((Persona)cmbInmPropietario.getValue());
			inmueble.setSituacion((Valor)cmbInmSituacion.getValue());
			inmueble.setTipoUso(txtInmTipodeUso.getValue().toString());

			if(inmueble.esNuevo()){
				expedienteInmuebleService.crear(inmueble);
			}else{
				expedienteInmuebleService.actualizar(inmueble);
			}
			
			AlertDialog alertDialog = new  AlertDialog("Registro de Inmueble", "Se ha registrado el inmueble correctamente", "Aceptar", "400");
			getApplication().getMainWindow().addWindow(alertDialog);
			refrescar();
		}
	}

	private void cargarTablaInmuebles( ){
		IndexedContainer container = new IndexedContainer();
		container.addContainerProperty("id", Long.class,  null);
		container.addContainerProperty("inmueble.id", Long.class, null);
		container.addContainerProperty("inmueble.tipoDireccion", String.class, null);
		container.addContainerProperty("inmueble.direccion", String.class, null);
		container.addContainerProperty("inmueble.urbanizacion", String.class, null);
		container.addContainerProperty("inmueble.ubicacion", String.class, null);
		container.addContainerProperty("propietario.id", Long.class, null);
		container.addContainerProperty("propietario.nombre", String.class, null);
		container.addContainerProperty("pisos", String.class, null);
		container.addContainerProperty("tipoUso", String.class, null);
		container.addContainerProperty("situacion.id", Long.class, null);
		container.addContainerProperty("situacion.nombre", String.class, null);
		
		tblInmuebles.setContainerDataSource(container);
		tblInmuebles.setVisibleColumns(new Object[]{"inmueble.direccion", "inmueble.urbanizacion", "propietario.nombre","pisos","situacion.nombre"});

		tblInmuebles.setColumnHeader("inmueble.direccion", "Direccion");
		tblInmuebles.setColumnHeader("inmueble.urbanizacion", "Urbanizacion");
		tblInmuebles.setColumnHeader("propietario.nombre", "Propietario");
		tblInmuebles.setColumnHeader("pisos", "Nro. Pisos");
		tblInmuebles.setColumnHeader("situacion.nombre", "Situacion");
		
		DetPerInmExp detinm = new DetPerInmExp();
		detinm.setExpediente(expediente);
		List<DetPerInmExp> lstinmuebles = expedienteInmuebleService.buscar(detinm);
		int con=1;
		for (DetPerInmExp inmueble : lstinmuebles){
			Item item = container.addItem(con++);
			item.getItemProperty("id").setValue(inmueble.getId());
			item.getItemProperty("inmueble.id").setValue(HarecUtil.nullToEmpty(inmueble.getInmueble().getId()));
			item.getItemProperty("inmueble.tipoDireccion").setValue(HarecUtil.nullToEmpty(inmueble.getInmueble().getDireccion()));
			item.getItemProperty("inmueble.direccion").setValue(HarecUtil.nullToEmpty(inmueble.getInmueble().getDireccion()));
			item.getItemProperty("inmueble.urbanizacion").setValue(HarecUtil.nullToEmpty(inmueble.getInmueble().getUrbanizacion()));
			item.getItemProperty("inmueble.ubicacion").setValue(HarecUtil.nullToEmpty(inmueble.getInmueble().getDireccion()));
			item.getItemProperty("propietario.id").setValue(HarecUtil.nullToEmpty(inmueble.getPropietario().getId()));
			item.getItemProperty("propietario.nombre").setValue(HarecUtil.nullToEmpty(inmueble.getPropietario().getNombreCompleto()));
			item.getItemProperty("pisos").setValue(HarecUtil.nullToEmpty(inmueble.getNumeroPisos()));
			item.getItemProperty("tipoUso").setValue(HarecUtil.nullToEmpty(inmueble.getTipoUso()));
			item.getItemProperty("situacion.id").setValue(HarecUtil.nullToEmpty(inmueble.getSituacion().getId()));
			item.getItemProperty("situacion.nombre").setValue(HarecUtil.nullToEmpty(inmueble.getSituacion().getNombre()));
		}
	}
	
	public void refrescar(){
		habilitarEdicion(false);
		limpiar();
		cargarTablaInmuebles();
	}
	
	private void habilitarEdicion(boolean flag){
		flagNuevaEstado = flag;
		if(flag){
			btnInmAgregar.setCaption("Actualizar");
		}
		else{
			btnInmRegistrar.setCaption("Crear");
		}
	}
	
	public void limpiar(){
		inmueble = new DetPerInmExp();
		inmueble.setExpediente(expediente);
		txtInmCodigo.setValue("");
		txtInmDireccion.setValue("");
		txtInmNumeroPisos.setValue("");
		txtInmTipodeUso.setValue("");
		txtInmTipoDireccion.setValue("");
		txtInmUbicacion.setValue("");
		txtInmUrbanizacion.setValue("");
		cmbInmInmueble.select(null);
		cmbInmPropietario.select(null);
		cmbInmSituacion.select(null);
	}
	
	
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("-1px");
		
		// pnlInmuebles
		pnlInmuebles = buildPnlInmuebles();
		mainLayout.addComponent(pnlInmuebles);
		
		return mainLayout;
	}

	@AutoGenerated
	private VerticalLayout buildPnlInmuebles() {
		// common part: create layout
		pnlInmuebles = new VerticalLayout();
		pnlInmuebles.setImmediate(false);
		pnlInmuebles.setWidth("-1px");
		pnlInmuebles.setHeight("-1px");
		pnlInmuebles.setMargin(false);
		
		// pnlInmueblesBody
		pnlInmueblesBody = buildPnlInmueblesBody();
		pnlInmuebles.addComponent(pnlInmueblesBody);
		
		return pnlInmuebles;
	}

	@AutoGenerated
	private VerticalLayout buildPnlInmueblesBody() {
		// common part: create layout
		pnlInmueblesBody = new VerticalLayout();
		pnlInmueblesBody.setImmediate(false);
		pnlInmueblesBody.setWidth("-1px");
		pnlInmueblesBody.setHeight("-1px");
		pnlInmueblesBody.setMargin(true);
		pnlInmueblesBody.setSpacing(true);
		
		// pnlInmueblesBody1
		pnlInmueblesBody1 = buildPnlInmueblesBody1();
		pnlInmueblesBody.addComponent(pnlInmueblesBody1);
		
		// pnlInmueblesBody2
		pnlInmueblesBody2 = buildPnlInmueblesBody2();
		pnlInmueblesBody.addComponent(pnlInmueblesBody2);
		
		// pnlInmueblesBody3
		pnlInmueblesBody3 = buildPnlInmueblesBody3();
		pnlInmueblesBody.addComponent(pnlInmueblesBody3);
		
		// pnlInmueblesBody4
		pnlInmueblesBody4 = buildPnlInmueblesBody4();
		pnlInmueblesBody.addComponent(pnlInmueblesBody4);
		
		// btnInmAgregar
		btnInmAgregar = new Button();
		btnInmAgregar.setCaption("Agregar Inmueble");
		btnInmAgregar.setImmediate(true);
		btnInmAgregar.setWidth("-1px");
		btnInmAgregar.setHeight("-1px");
		pnlInmueblesBody.addComponent(btnInmAgregar);
		pnlInmueblesBody
				.setComponentAlignment(btnInmAgregar, new Alignment(20));
		
		// tblInmuebles
		tblInmuebles = new Table();
		tblInmuebles.setImmediate(false);
		tblInmuebles.setWidth("800px");
		tblInmuebles.setHeight("-1px");
		pnlInmueblesBody.addComponent(tblInmuebles);
		pnlInmueblesBody.setComponentAlignment(tblInmuebles, new Alignment(20));
		
		return pnlInmueblesBody;
	}

	@AutoGenerated
	private HorizontalLayout buildPnlInmueblesBody1() {
		// common part: create layout
		pnlInmueblesBody1 = new HorizontalLayout();
		pnlInmueblesBody1.setImmediate(false);
		pnlInmueblesBody1.setWidth("-1px");
		pnlInmueblesBody1.setHeight("-1px");
		pnlInmueblesBody1.setMargin(false);
		
		// cmbInmInmueble
		cmbInmInmueble = new ComboBox();
		cmbInmInmueble.setCaption("Inmueble");
		cmbInmInmueble.setImmediate(false);
		cmbInmInmueble.setWidth("350px");
		cmbInmInmueble.setHeight("-1px");
		pnlInmueblesBody1.addComponent(cmbInmInmueble);
		
		// btnInmRegistrar
		btnInmRegistrar = new Button();
		btnInmRegistrar.setCaption("Registrar");
		btnInmRegistrar.setImmediate(true);
		btnInmRegistrar.setWidth("-1px");
		btnInmRegistrar.setHeight("-1px");
		pnlInmueblesBody1.addComponent(btnInmRegistrar);
		pnlInmueblesBody1.setComponentAlignment(btnInmRegistrar, new Alignment(
				9));
		
		return pnlInmueblesBody1;
	}

	@AutoGenerated
	private VerticalLayout buildPnlInmueblesBody2() {
		// common part: create layout
		pnlInmueblesBody2 = new VerticalLayout();
		pnlInmueblesBody2.setImmediate(false);
		pnlInmueblesBody2.setWidth("-1px");
		pnlInmueblesBody2.setHeight("-1px");
		pnlInmueblesBody2.setMargin(false);
		
		// pnlInmueblesBody2_1
		pnlInmueblesBody2_1 = buildPnlInmueblesBody2_1();
		pnlInmueblesBody2.addComponent(pnlInmueblesBody2_1);
		
		// pnlInmueblesBody2_2
		pnlInmueblesBody2_2 = buildPnlInmueblesBody2_2();
		pnlInmueblesBody2.addComponent(pnlInmueblesBody2_2);
		
		return pnlInmueblesBody2;
	}

	@AutoGenerated
	private HorizontalLayout buildPnlInmueblesBody2_1() {
		// common part: create layout
		pnlInmueblesBody2_1 = new HorizontalLayout();
		pnlInmueblesBody2_1.setImmediate(false);
		pnlInmueblesBody2_1.setWidth("-1px");
		pnlInmueblesBody2_1.setHeight("-1px");
		pnlInmueblesBody2_1.setMargin(false);
		pnlInmueblesBody2_1.setSpacing(true);
		
		// txtInmCodigo
		txtInmCodigo = new TextField();
		txtInmCodigo.setCaption("Código");
		txtInmCodigo.setImmediate(false);
		txtInmCodigo.setWidth("-1px");
		txtInmCodigo.setHeight("-1px");
		txtInmCodigo.setInputPrompt("Código");
		pnlInmueblesBody2_1.addComponent(txtInmCodigo);
		
		// txtInmTipoDireccion
		txtInmTipoDireccion = new TextField();
		txtInmTipoDireccion.setCaption("Tipo de Dirección");
		txtInmTipoDireccion.setImmediate(false);
		txtInmTipoDireccion.setWidth("-1px");
		txtInmTipoDireccion.setHeight("-1px");
		txtInmTipoDireccion.setInputPrompt("Tipo de Dirección");
		pnlInmueblesBody2_1.addComponent(txtInmTipoDireccion);
		
		// txtInmDireccion
		txtInmDireccion = new TextField();
		txtInmDireccion.setCaption("Dirección");
		txtInmDireccion.setImmediate(false);
		txtInmDireccion.setWidth("300px");
		txtInmDireccion.setHeight("-1px");
		txtInmDireccion.setInputPrompt("Dirección");
		txtInmDireccion.setMaxLength(200);
		pnlInmueblesBody2_1.addComponent(txtInmDireccion);
		
		return pnlInmueblesBody2_1;
	}

	@AutoGenerated
	private HorizontalLayout buildPnlInmueblesBody2_2() {
		// common part: create layout
		pnlInmueblesBody2_2 = new HorizontalLayout();
		pnlInmueblesBody2_2.setImmediate(false);
		pnlInmueblesBody2_2.setWidth("-1px");
		pnlInmueblesBody2_2.setHeight("-1px");
		pnlInmueblesBody2_2.setMargin(false);
		pnlInmueblesBody2_2.setSpacing(true);
		
		// txtInmUrbanizacion
		txtInmUrbanizacion = new TextField();
		txtInmUrbanizacion.setCaption("Urbanización");
		txtInmUrbanizacion.setImmediate(false);
		txtInmUrbanizacion.setWidth("300px");
		txtInmUrbanizacion.setHeight("-1px");
		txtInmUrbanizacion.setInputPrompt("Urbanización");
		txtInmUrbanizacion.setMaxLength(200);
		pnlInmueblesBody2_2.addComponent(txtInmUrbanizacion);
		
		// txtInmUbicacion
		txtInmUbicacion = new TextField();
		txtInmUbicacion.setCaption("Ubicación");
		txtInmUbicacion.setImmediate(false);
		txtInmUbicacion.setWidth("-1px");
		txtInmUbicacion.setHeight("-1px");
		txtInmUbicacion.setInputPrompt("Ubicación");
		pnlInmueblesBody2_2.addComponent(txtInmUbicacion);
		
		return pnlInmueblesBody2_2;
	}

	@AutoGenerated
	private HorizontalLayout buildPnlInmueblesBody3() {
		// common part: create layout
		pnlInmueblesBody3 = new HorizontalLayout();
		pnlInmueblesBody3.setImmediate(false);
		pnlInmueblesBody3.setWidth("-1px");
		pnlInmueblesBody3.setHeight("-1px");
		pnlInmueblesBody3.setMargin(false);
		
		// cmbInmPropietario
		cmbInmPropietario = new ComboBox();
		cmbInmPropietario.setCaption("Propietario");
		cmbInmPropietario.setImmediate(false);
		cmbInmPropietario.setWidth("350px");
		cmbInmPropietario.setHeight("-1px");
		pnlInmueblesBody3.addComponent(cmbInmPropietario);
		
		return pnlInmueblesBody3;
	}

	@AutoGenerated
	private HorizontalLayout buildPnlInmueblesBody4() {
		// common part: create layout
		pnlInmueblesBody4 = new HorizontalLayout();
		pnlInmueblesBody4.setImmediate(false);
		pnlInmueblesBody4.setWidth("-1px");
		pnlInmueblesBody4.setHeight("-1px");
		pnlInmueblesBody4.setMargin(false);
		
		// txtInmTipodeUso
		txtInmTipodeUso = new TextField();
		txtInmTipodeUso.setCaption("Tipo de uso");
		txtInmTipodeUso.setImmediate(false);
		txtInmTipodeUso.setWidth("250px");
		txtInmTipodeUso.setHeight("-1px");
		txtInmTipodeUso.setInputPrompt("Tipo de Uso");
		pnlInmueblesBody4.addComponent(txtInmTipodeUso);
		
		// txtInmNumeroPisos
		txtInmNumeroPisos = new TextField();
		txtInmNumeroPisos.setCaption("Numero de pisos");
		txtInmNumeroPisos.setImmediate(false);
		txtInmNumeroPisos.setWidth("110px");
		txtInmNumeroPisos.setHeight("-1px");
		txtInmNumeroPisos.setInputPrompt("Numero de pisos");
		txtInmNumeroPisos.setMaxLength(2);
		pnlInmueblesBody4.addComponent(txtInmNumeroPisos);
		
		// cmbInmSituacion
		cmbInmSituacion = new ComboBoxLOVS();
		cmbInmSituacion.setCaption("Situación");
		cmbInmSituacion.setImmediate(false);
		cmbInmSituacion.setWidth("-1px");
		cmbInmSituacion.setHeight("-1px");
		pnlInmueblesBody4.addComponent(cmbInmSituacion);
		
		return pnlInmueblesBody4;
	}

}
