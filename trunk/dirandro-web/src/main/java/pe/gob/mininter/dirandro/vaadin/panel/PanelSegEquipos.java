package pe.gob.mininter.dirandro.vaadin.panel;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import pe.gob.mininter.dirandro.exception.ValidacionException;
import pe.gob.mininter.dirandro.model.Dependencia;
import pe.gob.mininter.dirandro.model.Equipo;
import pe.gob.mininter.dirandro.model.Integrante;
import pe.gob.mininter.dirandro.model.Opcion;
import pe.gob.mininter.dirandro.model.Usuario;
import pe.gob.mininter.dirandro.model.Valor;
import pe.gob.mininter.dirandro.service.DependenciaService;
import pe.gob.mininter.dirandro.service.EquipoService;
import pe.gob.mininter.dirandro.service.IntegranteService;
import pe.gob.mininter.dirandro.service.UsuarioService;
import pe.gob.mininter.dirandro.service.ValorService;
import pe.gob.mininter.dirandro.util.Constante;
import pe.gob.mininter.dirandro.util.HarecUtil;
import pe.gob.mininter.dirandro.vaadin.util.DirandroComponent;
import pe.gob.mininter.dirandro.vaadin.util.Injector;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.data.util.HierarchicalContainer;
import com.vaadin.data.util.IndexedContainer;
import com.vaadin.event.ShortcutAction.KeyCode;
import com.vaadin.event.ShortcutListener;
import com.vaadin.ui.AbstractSelect.Filtering;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextField;
import com.vaadin.ui.TreeTable;
import com.vaadin.ui.VerticalLayout;

public class PanelSegEquipos extends DirandroComponent implements ClickListener {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
	
	@AutoGenerated
	private VerticalLayout mainLayout;

	@AutoGenerated
	private VerticalLayout pnlPrincipal;

	@AutoGenerated
	private Button btnGrabarIntegrantes;

	@AutoGenerated
	private HorizontalLayout pnlValorContenido;

	@AutoGenerated
	private VerticalLayout pnlGrabarIntegrante;

	@AutoGenerated
	private HorizontalLayout pnlValorFila5;

	@AutoGenerated
	private Button btnEliminarIntegrante;

	@AutoGenerated
	private Button btnGrabarIntegrante;

	@AutoGenerated
	private HorizontalLayout pnlValorFila4;

	@AutoGenerated
	private CheckBox chkLider;

	@AutoGenerated
	private TextField txtDescripcionSBS;

	@AutoGenerated
	private HorizontalLayout pnlValorFila3;

	@AutoGenerated
	private ComboBox cboNombreIntegrante;

	@AutoGenerated
	private HorizontalLayout pnlValorFila1;

	@AutoGenerated
	private ComboBox cboFuncionIntegrante;

	@AutoGenerated
	private HorizontalLayout pnlValorFila2;

	@AutoGenerated
	private ComboBox cboEstadoIntegrante;

	@AutoGenerated
	private TextField txtIdIntegrante;

	@AutoGenerated
	private VerticalLayout pnlIntegrantes;

	@AutoGenerated
	private Table tblIntegrantes;

	@AutoGenerated
	private HorizontalLayout pnlFiltroSBS;

	@AutoGenerated
	private Label lblIntegrantes;

	@AutoGenerated
	private HorizontalLayout pnlEquipoContenido;

	@AutoGenerated
	private VerticalLayout pnlGrabarLista;

	@AutoGenerated
	private HorizontalLayout pnlListaFila4;

	@AutoGenerated
	private Button btnEliminarEquipo;

	@AutoGenerated
	private Button btnGrabarEquipo;

	@AutoGenerated
	private VerticalLayout pnlListaFila2;

	@AutoGenerated
	private ComboBox cmbEquipo;

	@AutoGenerated
	private ComboBox cmbDepartamento;

	@AutoGenerated
	private ComboBox cmbDivision;

	@AutoGenerated
	private ComboBox cmbDireccion;

	@AutoGenerated
	private TextField txtNombreEquipo;

	@AutoGenerated
	private TextField txtAbreviatura;

	@AutoGenerated
	private HorizontalLayout horizontalLayout_1;

	@AutoGenerated
	private ComboBox cmbEstadoEquipo;

	@AutoGenerated
	private ComboBox cmbTipoAgrupEquipo;

	@AutoGenerated
	private Label lblEquipo;

	@AutoGenerated
	private VerticalLayout pnlEquipos;

	@AutoGenerated
	private TreeTable treeTblEquipo;

	@AutoGenerated
	private HorizontalLayout pnlFiltrosEquipos;

	@AutoGenerated
	private TextField txtFiltroNombreEquipo;

	@AutoGenerated
	private TextField txtFiltroCodigoEquipo;

	@AutoGenerated
	private TextField txtFiltroDepartamentoEquipo;

	@AutoGenerated
	private TextField txtFiltroDivisionEquipo;

	@AutoGenerated
	private Label lblEquipos;

	private static final long serialVersionUID = -5759281628746296754L;
	
	protected static final Log logger = LogFactory.getLog(PanelSegEquipos.class);
	
	//** Servicios Utilizados
	private ValorService valorService;	
	private EquipoService equipoService;	
	private IntegranteService integranteService;	
	private UsuarioService usuarioService;	
	private DependenciaService dependenciaService;
	
	//** Variables Globales
	private boolean flagNuevoEquipo;	
	private List<Long> listaIds = null;	
	private boolean flagNuevoIntegrante;
	private Integer conta = 1;
	private Long idEquipo;
	private IndexedContainer containerIntegrantes = null;
	
	//** Listas Globales	
	private List<Valor> lstEstados = null;	
	private List<Valor> lstFunciones = null;
	private List<Usuario> lstUsuarios = null;
	private List<Valor> lstTiposAgrupacion;
	private List<Dependencia> lstDivisiones;
	private List<Dependencia> lstDepartamentos;
	private List<Integrante> lstIntegrantes;
	private List<Equipo> lstEquipos;
	private List<Dependencia> lstDirecciones;
	
	public PanelSegEquipos(List<Opcion> acciones, String height) {
		super(acciones, height);
		valorService = Injector.obtenerServicio(ValorService.class);
		equipoService = Injector.obtenerServicio(EquipoService.class);
		integranteService = Injector.obtenerServicio(IntegranteService.class);
		usuarioService = Injector.obtenerServicio(UsuarioService.class);
		dependenciaService = Injector.obtenerServicio(DependenciaService.class);
		buildMainLayout();
		setCompositionRoot(mainLayout);		
		postConstruct();
		debugId();
	}
	
	private void debugId(){
		mainLayout.setDebugId("mainLayout");
		pnlValorContenido.setDebugId("pnlValorContenido");
		pnlGrabarIntegrante.setDebugId("pnlGrabarIntegrante");
		pnlValorFila5.setDebugId("pnlValorFila5");
		btnEliminarIntegrante.setDebugId("btnEliminarIntegrante");
		btnGrabarIntegrante.setDebugId("btnGrabarIntegrante");
		pnlValorFila4.setDebugId("pnlValorFila4");
		chkLider.setDebugId("chkLider");
		txtDescripcionSBS.setDebugId("txtDescripcionSBS");
		pnlValorFila3.setDebugId("pnlValorFila3");
		cboNombreIntegrante.setDebugId("cboNombreIntegrante");
		pnlValorFila2.setDebugId("pnlValorFila2");
		cboEstadoIntegrante.setDebugId("cboEstadoIntegrante");
		cboFuncionIntegrante.setDebugId("cboFuncionIntegrante");
		txtIdIntegrante.setDebugId("lblIdIntegrante");
		pnlIntegrantes.setDebugId("pnlIntegrantes");
		tblIntegrantes.setDebugId("tblIntegrantes");
		pnlFiltroSBS.setDebugId("pnlFiltroSBS");
		lblIntegrantes.setDebugId("lblIntegrantes");
		pnlEquipoContenido.setDebugId("pnlEquipoContenido");
		pnlGrabarLista.setDebugId("pnlGrabarLista");
		pnlListaFila4.setDebugId("pnlListaFila4");
		btnEliminarEquipo.setDebugId("btnEliminarEquipo");
		btnGrabarEquipo.setDebugId("btnGrabarEquipo");
		cmbEquipo.setDebugId("cmbEquipo");
		cmbTipoAgrupEquipo.setDebugId("cmbTipoAgrupEquipo");
		pnlListaFila2.setDebugId("pnlListaFila2");
		txtNombreEquipo.setDebugId("txtNombreEquipo");
		cmbEstadoEquipo.setDebugId("cboEstado");
		pnlEquipos.setDebugId("pnlEquipos");
		treeTblEquipo.setDebugId("treeTblEquipo");
		pnlFiltrosEquipos.setDebugId("pnlFiltrosEquipos");	
		txtFiltroCodigoEquipo.setDebugId("txtFiltroCodigoEquipo");
		txtFiltroNombreEquipo.setDebugId("txtFiltroNombreEquipo");
		lblEquipos.setDebugId("lblEquipos");
	}
	
	public void postConstruct() {
		cargarCombos();
		
		inicializarVariables();
		inicializarEquipos();
		//inicializarIntegrantes();
		
	}
	
	//** Inicializar Variables Globales **// 
	private void inicializarVariables(){
		cargarIntegrantes(new ArrayList<Integrante>(),true);
		this.chkLider.setVisible(false);
		
  		btnGrabarEquipo.addListener((ClickListener)this);
		btnGrabarEquipo.setIcon(Constante.ICONOS.SAVE);		
		btnEliminarEquipo.addListener((ClickListener)this);
		btnEliminarEquipo.setIcon(Constante.ICONOS.DELETE);
		btnGrabarIntegrante.addListener((ClickListener)this);
		btnGrabarIntegrante.setIcon(Constante.ICONOS.SAVE);	
		btnEliminarIntegrante.addListener((ClickListener)this);
		btnEliminarIntegrante.setIcon(Constante.ICONOS.DELETE);
		btnGrabarIntegrantes.addListener((ClickListener)this);
		btnGrabarIntegrantes.setEnabled(false);
		
		
		
		
		//cmbTipoAgrupEquipo.setEnabled(false);
	}
	
	//** Inicializar Listado de Equipos **//
	private void inicializarEquipos(){
		habilitarEdicion("equipo",false);
		
		treeTblEquipo.setSelectable(true);
		treeTblEquipo.setImmediate(true);
		treeTblEquipo.addListener(new ValueChangeListener() {
			
			private static final long serialVersionUID = 1L;

			@Override
			public void valueChange(ValueChangeEvent event) {
				boolean sel = treeTblEquipo.getItem(treeTblEquipo.getValue()) == null;				
				if(sel){
					treeTblEquipo.setValue(null);
					habilitarEdicion("equipo",!sel);
					tblIntegrantes.setValue(null);
					limpiar("equipo");
					limpiar("integrante");
					//cmbTipoAgrupEquipo.select(agrupacionEquipo);
					btnGrabarIntegrantes.setEnabled(false);
					tblIntegrantes.removeAllItems();
				}else{					
					Item item = (Item)treeTblEquipo.getItem(treeTblEquipo.getValue());
					Equipo equipo = new Equipo();
					equipo.setId((Long) item.getItemProperty("id").getValue());
					Integrante integrante = new Integrante();
					integrante.setEquipo(equipo);
					
					lstIntegrantes = integranteService.buscar(integrante);
					tblIntegrantes.removeAllItems();
					cargarIntegrantes(lstIntegrantes, true);
					
					idEquipo =  (Long) item.getItemProperty("id").getValue();
					 
					/*if(item.getItemProperty("padre.codigo").getValue()!=null){
						Equipo padreEquipo= new Equipo();
						padreEquipo.setId((Long)item.getItemProperty("padre.id").getValue());
						padreEquipo.setCodigo(item.getItemProperty("padre.codigo").getValue().toString());
						cmbEquipo.select(padreEquipo);
					}*/
					
					for (Valor estado : lstEstados) {
						if (estado.getId() == (Long) item.getItemProperty("estado.id").getValue()) {
							cmbEstadoEquipo.select(estado);
							break;
						}
					}
					
					for (Valor tipoAgrupacion : lstTiposAgrupacion) {
						if(tipoAgrupacion.getId().equals((Long)item.getItemProperty("tipoAgrupacion.id").getValue())){
							cmbTipoAgrupEquipo.select(tipoAgrupacion);
							break;
						}
					}
					
					for (Dependencia dependencia : lstDivisiones) {
						if(dependencia.getId().equals((Long)item.getItemProperty("division.padre.id").getValue())){
							cmbDivision.select(dependencia);
							break;
						}
					}
					
					if(lstDepartamentos !=null && lstDepartamentos.size()!=0  ){
						for (Dependencia dependencia : lstDepartamentos) {
							if(dependencia.getId().equals((Long)item.getItemProperty("dependencia.id").getValue())){
								cmbDepartamento.select(dependencia);
								break;
							}
						}
					}
					
					txtNombreEquipo.setValue(item.getItemProperty("nombreEquipo").getValue());
					txtAbreviatura.setValue(item.getItemProperty("codigo").getValue() != null ?  item.getItemProperty("codigo").getValue() : StringUtils.EMPTY);
					btnGrabarIntegrantes.setEnabled(true);
					habilitarEdicion("equipo", !sel);
					limpiar("integrante");
				}
				
			}
		});
		
		txtFiltroDivisionEquipo.setImmediate(true);
		txtFiltroDepartamentoEquipo.setImmediate(true);
		txtFiltroCodigoEquipo.setImmediate(true);
		txtFiltroNombreEquipo.setImmediate(true);
		
		txtFiltroDivisionEquipo.addShortcutListener(new ShortcutListener("", KeyCode.ENTER, null) {
			private static final long serialVersionUID = 8860857975954987641L;

			@Override
			public void handleAction(Object sender, Object target) {
				shortCutEnter(sender, target);
			}
		});
		
		txtFiltroDepartamentoEquipo.addShortcutListener(new ShortcutListener("", KeyCode.ENTER, null) {
			private static final long serialVersionUID = 6958768602930975040L;

			@Override
			public void handleAction(Object sender, Object target) {
				shortCutEnter(sender, target);
			}
		});
		
		txtFiltroCodigoEquipo.addShortcutListener(new ShortcutListener("", KeyCode.ENTER, null) {
			private static final long serialVersionUID = 9165069472632705584L;

			@Override
			public void handleAction(Object sender, Object target) {
				shortCutEnter(sender, target);
			}
		});
		
		txtFiltroNombreEquipo.addShortcutListener(new ShortcutListener("", KeyCode.ENTER, null) {
			private static final long serialVersionUID = 3588699645353178238L;

			@Override
			public void handleAction(Object sender, Object target) {
				shortCutEnter(sender, target);
			}
		});

		listarEquipos();
	}
	
	private void listarEquipos() {
		Map<String,List<Equipo>> map = equipoService.listarEquipos();
		cargarEquipos(map);
	}
	
	private void cargarEquipos(Map<String,List<Equipo>> map){
		
		HierarchicalContainer hwContainer = new HierarchicalContainer();

		hwContainer.addContainerProperty("id", Long.class, null);
		hwContainer.addContainerProperty("nombreEquipo", String.class, null);
		hwContainer.addContainerProperty("codigo", String.class, null);
		hwContainer.addContainerProperty("tipoAgrupacion.id", Long.class, null);
		hwContainer.addContainerProperty("tipoAgrupacion.nombre", String.class, null);
		hwContainer.addContainerProperty("estado.id", Long.class, null);
		hwContainer.addContainerProperty("estado.nombre", String.class, null);
		hwContainer.addContainerProperty("padre.id", Long.class, null);
		hwContainer.addContainerProperty("padre.codigo", String.class, null);
		hwContainer.addContainerProperty("dependencia.id", Long.class, null);
		hwContainer.addContainerProperty("dependencia.nombre", String.class, null);
		hwContainer.addContainerProperty("departamento.Abreviatura", String.class, null);
		hwContainer.addContainerProperty("dependencia", Dependencia.class, null);
		hwContainer.addContainerProperty("division.abreviatura", String.class, null);
		hwContainer.addContainerProperty("division.padre.id", Long.class, null);
		
		if(map.get(Constante.OPCION.KEY_PADRE) != null){
			recorrer(Constante.OPCION.KEY_PADRE, map, null, hwContainer);
		}
		treeTblEquipo.setContainerDataSource(hwContainer);
		treeTblEquipo.setItemCaptionPropertyId("nombre");
		
		treeTblEquipo.setVisibleColumns(new Object[]{"division.abreviatura", "departamento.Abreviatura", "codigo", "nombreEquipo","tipoAgrupacion.nombre", "estado.nombre"});
		treeTblEquipo.setColumnWidth("id", 30);
		treeTblEquipo.setColumnWidth("codigo", 95);
		treeTblEquipo.setColumnWidth("division.abreviatura", 90);
		treeTblEquipo.setColumnWidth("departamento.Abreviatura", 90);
		treeTblEquipo.setColumnWidth("nombreEquipo", 170);
		treeTblEquipo.setColumnWidth("tipoAgrupacion.nombre", 80);
		treeTblEquipo.setColumnWidth("estado.nombre", 60);
		treeTblEquipo.setColumnWidth("dependencia.nombre", 260);
		
		treeTblEquipo.setColumnHeader("id", "Id");
		treeTblEquipo.setColumnHeader("codigo", "Abreviatura");
		treeTblEquipo.setColumnHeader("division.abreviatura", "División");
		treeTblEquipo.setColumnHeader("departamento.Abreviatura", "Departamento");
		treeTblEquipo.setColumnHeader("nombreEquipo", "Nombre del Equipo");
		treeTblEquipo.setColumnHeader("nombre", "Nombre");
		treeTblEquipo.setColumnHeader("tipoAgrupacion.nombre", "Agrupación");
		treeTblEquipo.setColumnHeader("estado.nombre", "Estado");
		treeTblEquipo.setColumnHeader("dependencia.nombre", "Dependencia");
		
		for (Object id : treeTblEquipo.rootItemIds()) 
			treeTblEquipo.setCollapsed(id, false);
		
		for (Object itemId: treeTblEquipo.getItemIds())
			treeTblEquipo.setCollapsed(itemId, false);
		
	}

	private void recorrer(String nombre, Map<String, List<Equipo>> map, Long objPadre, HierarchicalContainer hwContainer) {
		Item item = null;
		for (Equipo equipo : map.get(nombre)) {
			
			item = hwContainer.addItem(equipo.getId());
			item.getItemProperty("id").setValue(equipo.getId());
			item.getItemProperty("codigo").setValue(equipo.getCodigo());
			item.getItemProperty("nombreEquipo").setValue(equipo.getNombre());
			item.getItemProperty("tipoAgrupacion.id").setValue(equipo.getTipoAgrupacion()==null ? null: equipo.getTipoAgrupacion().getId());
			item.getItemProperty("tipoAgrupacion.nombre").setValue(equipo.getTipoAgrupacion()==null ? null: equipo.getTipoAgrupacion().getNombre());
			item.getItemProperty("estado.id").setValue(equipo.getEstado()==null ? null: equipo.getEstado().getId());
			item.getItemProperty("estado.nombre").setValue(equipo.getEstado() == null ? null : equipo.getEstado().getNombre());
			item.getItemProperty("padre.id").setValue(equipo.getPadre() == null ? null : equipo.getPadre().getId());
			item.getItemProperty("padre.codigo").setValue(equipo.getPadre() == null ? null : equipo.getPadre().getCodigo());
			item.getItemProperty("dependencia.id").setValue(equipo.getDependencia() == null ? null : equipo.getDependencia().getId());
			item.getItemProperty("dependencia.nombre").setValue(equipo.getDependencia() == null ? null : equipo.getDependencia().getNombre());
			item.getItemProperty("departamento.Abreviatura").setValue(equipo.getDependencia() == null ? null : equipo.getDependencia().getAbreviatura());
			item.getItemProperty("division.abreviatura").setValue(equipo.getDependencia() == null ?  null : equipo.getDependencia().getPadre().getAbreviatura());
			item.getItemProperty("division.padre.id").setValue(equipo.getDependencia() == null ? null : equipo.getDependencia().getPadre().getId());
			
			if (!nombre.equals(Constante.OPCION.KEY_PADRE)) {
				hwContainer.setParent(equipo.getId(), objPadre);
			}
			if (map.get(equipo.getId().toString()) != null) {
				recorrer(equipo.getId().toString(), map, equipo.getId(),hwContainer);
			} else {
				hwContainer.setChildrenAllowed(equipo.getId().toString(), false);
			}
		}
	}
	
	//Iniciaalizar Integrantes **//
	private void inicializarIntegrantes(){

		txtIdIntegrante.setValue("");
		pnlValorContenido.setVisible(true);
		habilitarEdicion("integrante", false);
		
		tblIntegrantes.setSelectable(true);
		tblIntegrantes.setMultiSelect(true);
		tblIntegrantes.setImmediate(true);
		tblIntegrantes.setNullSelectionAllowed(true);
		tblIntegrantes.setNullSelectionItemId(null);

		tblIntegrantes.addListener(new Table.ValueChangeListener() {
			
			private static final long serialVersionUID = -4721770533858762047L;

			public void valueChange(ValueChangeEvent event) {
				 Set<?> value = (Set<?>) event.getProperty().getValue();
				
				if (null == value || value.size() == 0) {
                    habilitarEliminacionMultiple(false);
                    habilitarEdicion("integrante", false);
                    limpiar("integrante");
                    listaIds=null;
                }else {    
                	if(value.size()==1){
                		listaIds=null;
                    	habilitarEliminacionMultiple(false);
                    	habilitarEdicion("integrante", true);
                    	String pba = tblIntegrantes.getValue().toString();
                    	int idItem = Integer.parseInt(pba.substring(pba.indexOf("[")+1,pba.indexOf("]")));
                    	Item item = tblIntegrantes.getItem(idItem);
                    	txtIdIntegrante.setValue(item.getItemProperty("id").getValue().toString());

                    	for (Valor estadoIntegrante : lstEstados) {
    						if(estadoIntegrante.getId().equals(item.getItemProperty("estado.id").getValue())){
    							cboEstadoIntegrante.select(estadoIntegrante);
    							break;
    						}
    					}
                    		
                    	for (Valor funcionIntegrante : lstFunciones) {
    						if(funcionIntegrante.getCodigo().equals(item.getItemProperty("funcion.codigo").getValue().toString())){
    							cboFuncionIntegrante.select(funcionIntegrante);
    							break;
    						}
    					}
                    	
                    	for (Usuario usuario : lstUsuarios) {
    						if (usuario.getUsuario().equals(item.getItemProperty("integrante.usuario").getValue())) {
    							cboNombreIntegrante.setValue(usuario);
    							break;
    						}
    					}
                	}else {
                		listaIds=new ArrayList<Long>();
						for (Object object : value) {
							int idItem = Integer.parseInt(object.toString());
							Item item = tblIntegrantes.getItem(idItem);
							Long id = (Long) item.getItemProperty("id").getValue();
							listaIds.add(id);
						}
						
                        lblIntegrantes.setValue("Seleccionados ->"+tblIntegrantes.getValue());
                        txtIdIntegrante.setValue("Multiple");
                        habilitarEliminacionMultiple(true);
					}
				}
            }
        });
	}
	
	private IndexedContainer cargarContainerIntegrantes(){
		containerIntegrantes = new IndexedContainer();
		containerIntegrantes.addContainerProperty("id", Long.class,  null);
		containerIntegrantes.addContainerProperty("equipo", Equipo.class,  null);
		containerIntegrantes.addContainerProperty("equipo.id", Long.class,  null);
		containerIntegrantes.addContainerProperty("equipo.nombre", String.class,  null);
		containerIntegrantes.addContainerProperty("integrante.id", Long.class, null);
		containerIntegrantes.addContainerProperty("integrante.usuario", String.class, null);
		containerIntegrantes.addContainerProperty("integrante.nombreCompleto", String.class,  null);	
		containerIntegrantes.addContainerProperty("estado.id", Long.class, null);
		containerIntegrantes.addContainerProperty("estado.nombre", String.class, null);
		containerIntegrantes.addContainerProperty("funcion.id", Long.class, null);
		containerIntegrantes.addContainerProperty("funcion.codigo", String.class, null);
		containerIntegrantes.addContainerProperty("funcion.nombre", String.class, null);
		return containerIntegrantes;
	}
		
	private void cargarIntegrantes(List<Integrante> lstIntegrantes, boolean flagLimpiar){
		
		tblIntegrantes.setContainerDataSource(cargarContainerIntegrantes());
		tblIntegrantes.setVisibleColumns(new Object[]{"id", "integrante.nombreCompleto", "estado.nombre", "funcion.nombre"});		
				
		tblIntegrantes.setColumnWidth("integrante.nombreCompleto", 200);	
		tblIntegrantes.setColumnWidth("equipo.id", 74);
		tblIntegrantes.setColumnWidth("estado.nombre", 45);
		tblIntegrantes.setColumnWidth("funcion.nombre", 200);		
				
		tblIntegrantes.setColumnHeader("integrante.nombreCompleto", "Integrante");
		tblIntegrantes.setColumnHeader("estado.nombre", "Estado");
		tblIntegrantes.setColumnHeader("funcion.nombre", "Funcion");
		
		for (Integrante integrante: lstIntegrantes){
			Item item = containerIntegrantes.addItem(conta);
			item.getItemProperty("id").setValue(integrante.getId());
			item.getItemProperty("integrante.id").setValue(integrante.getUsuario().getId());
			item.getItemProperty("integrante.usuario").setValue(integrante.getUsuario().getUsuario());
			item.getItemProperty("integrante.nombreCompleto").setValue(integrante.getUsuario().getNombres());
			item.getItemProperty("equipo.nombre").setValue(integrante.getEquipo().getNombre());
			item.getItemProperty("estado.id").setValue(integrante.getEstado() == null ? null : integrante.getEstado().getId());
			item.getItemProperty("estado.nombre").setValue(integrante.getEstado() == null ? null : integrante.getEstado().getNombre());
			item.getItemProperty("funcion.id").setValue(integrante.getFuncion() == null ? null : integrante.getFuncion().getId());
			item.getItemProperty("funcion.codigo").setValue(integrante.getFuncion() == null ? null : integrante.getFuncion().getCodigo());
			item.getItemProperty("funcion.nombre").setValue(integrante.getFuncion() == null ? null : integrante.getFuncion().getNombre());			
			conta++;
		}
	}
	
	//** Listas Desplegables de todo el Aplicativo **//
	private void obtenerDependenciaUsuario(){
		Usuario usuarioSesion = HarecUtil.obtenerUsuarioSesion();
		cmbDivision.setInputPrompt("Divisiones Especializadas");
		cmbDepartamento.setInputPrompt("Departamento a Cargo");
		
		if (usuarioSesion.getOficina() != null) {
			cmbDireccion.setVisible(false);
			Dependencia dependencia =  dependenciaService.buscarPadre(usuarioSesion.getOficina().getId());
			lstDivisiones = dependenciaService.buscarHijos(dependencia);
			llenarComboDivision(lstDivisiones);
		}else {
			lstDirecciones = dependenciaService.buscarPadres();
			BeanItemContainer<Dependencia> bicDirecciones = new BeanItemContainer<Dependencia>(Dependencia.class, lstDirecciones);
			cmbDireccion.setInputPrompt("Direcciones Generales");
			cmbDireccion.setContainerDataSource(bicDirecciones);
			cmbDireccion.setItemCaptionPropertyId("nombre");
			cmbDireccion.setFilteringMode(Filtering.FILTERINGMODE_CONTAINS);
			cmbDireccion.setImmediate(true);
			cmbDireccion.addListener(new ValueChangeListener() {
				
				private static final long serialVersionUID = -4721770533858762047L;

				@Override
				public void valueChange(ValueChangeEvent event) {
					cargarDivisionesChange(event);
				}
			});
		}
	}
	
	private void llenarComboDivision(List<Dependencia> lstDivisiones){		
		cmbDivision.setContainerDataSource(new BeanItemContainer<Dependencia>(Dependencia.class, lstDivisiones));
		cmbDivision.setItemCaptionPropertyId("nombre");
		cmbDivision.setFilteringMode(Filtering.FILTERINGMODE_CONTAINS);
		cmbDivision.setImmediate(true);
		cmbDivision.addListener(new ValueChangeListener() {
			
			private static final long serialVersionUID = -4721770533858762047L;

			@Override
			public void valueChange(ValueChangeEvent event) {
				cargarDepartamentosChange(event);
			}
		});
	}
	
	private void cargarDivisionesChange(ValueChangeEvent event){
		lstDivisiones = dependenciaService.buscarHijos((Dependencia) cmbDireccion.getValue());
		llenarComboDivision(lstDivisiones);
	}
	
	private void cargarDepartamentosChange(ValueChangeEvent event){
		lstDepartamentos = dependenciaService.buscarHijos((Dependencia) cmbDivision.getValue());
		BeanItemContainer<Dependencia> bicDepartamentos = new BeanItemContainer<Dependencia>(Dependencia.class,  lstDepartamentos);
		cmbDepartamento.setContainerDataSource(bicDepartamentos);
		cmbDepartamento.setItemCaptionPropertyId("abreviatura");
		cmbDepartamento.select(lstDepartamentos);
		cmbDepartamento.setImmediate(true);
	}
	
	private void cargarCombos(){
		obtenerDependenciaUsuario();
		cmbEquipo.setVisible(false);
		
		lstTiposAgrupacion = valorService.obtenerLista(Constante.LISTA.CODIGO.TIPO_AGRUPACION);
		lstEstados = valorService.obtenerLista(Constante.LISTA.CODIGO.ESTADO);
		
		cmbTipoAgrupEquipo.setInputPrompt("Tipo de Agrupación");
		cmbTipoAgrupEquipo.setContainerDataSource(new BeanItemContainer<Valor>(Valor.class,  lstTiposAgrupacion));
		cmbTipoAgrupEquipo.setItemCaptionPropertyId("nombre");
		cmbTipoAgrupEquipo.setImmediate(true);
		cmbTipoAgrupEquipo.addListener(new ValueChangeListener() {
			
			private static final long serialVersionUID = 3206960170273013371L;

			@Override
			public void valueChange(ValueChangeEvent event) {
				Valor tipoAgrupacion = (Valor) cmbTipoAgrupEquipo.getValue();
				if (tipoAgrupacion != null) {
					if (tipoAgrupacion.getCodigo().equals(Constante.VALOR.CODIGO.TIP_GRP)) {
						cmbEquipo.setVisible(true);
						txtNombreEquipo.setInputPrompt("Nombre del Grupo");
					}else {
						cmbEquipo.setVisible(false);
						txtNombreEquipo.setInputPrompt("Nombre del Equipo");
					}
				}	
			}
		});
		
		cmbEstadoEquipo.setInputPrompt("Estados");
		cmbEstadoEquipo.setContainerDataSource(new BeanItemContainer<Valor>(Valor.class, lstEstados));
		cmbEstadoEquipo.setItemCaptionPropertyId("nombre");
		
		// ** Integrante **//
		//lstFunciones = valorService.obtenerLista(Constante.LISTA.CODIGO.FUNCION_TIPO);
		lstUsuarios = usuarioService.obtenerTodos();
		for (Usuario usuario : lstUsuarios) 
			txtIdIntegrante.setValue(txtIdIntegrante.getValue()+usuario.getId().toString()+",");
		
		cboFuncionIntegrante.setInputPrompt("Funcion");
		cboFuncionIntegrante.setContainerDataSource(new BeanItemContainer<Valor>(Valor.class, lstFunciones));
		cboFuncionIntegrante.setItemCaptionPropertyId("nombre");
		
		cboEstadoIntegrante.setInputPrompt("Estado");
		cboEstadoIntegrante.setContainerDataSource(new BeanItemContainer<Valor>(Valor.class, lstEstados));
		cboEstadoIntegrante.setItemCaptionPropertyId("nombre");
		
		cboNombreIntegrante.setInputPrompt("Registro Nombre Completo");
		cboNombreIntegrante.setContainerDataSource(new BeanItemContainer<Usuario>(Usuario.class,  lstUsuarios));
		cboNombreIntegrante.setItemCaptionPropertyId("nombreCompleto");
		cboNombreIntegrante.setFilteringMode(Filtering.FILTERINGMODE_CONTAINS);		

		cargarEquiposPadres();
	}
	
	private void cargarEquiposPadres(){
		lstEquipos = equipoService.buscar(null);
		BeanItemContainer<Equipo> bicEquipos = new BeanItemContainer<Equipo>(Equipo.class,  lstEquipos);
		
		cmbEquipo.setInputPrompt("Equipo padre");
		cmbEquipo.setContainerDataSource(bicEquipos);
		cmbEquipo.setImmediate(true);
		cmbEquipo.setItemCaptionPropertyId("etiquetaCaption");
			
	}
	
	//** Acciones de los Botones
	@Override
	public void buttonClick(ClickEvent event) {
		if (event.getButton().equals(btnGrabarEquipo)) 
			buttonClickGrabarEquipo();
		
		if (event.getButton().equals(btnEliminarEquipo)) 
			buttonClickEliminarEquipo();
		
		if (event.getButton().equals(btnGrabarIntegrante))
			buttonClickGrabarIntegrante();
		
		if (event.getButton().equals(btnEliminarIntegrante))
			buttonClickEliminarIntegrante();
		
		if (event.getButton().equals(btnGrabarIntegrantes))
			buttonClickGrabarIntegrantes();
			
	}
	
	private void buttonClickGrabarEquipo(){
		Equipo equipo = new Equipo();
		equipo.setCodigo((String)txtAbreviatura.getValue());
		equipo.setNombre((String)txtNombreEquipo.getValue());
		equipo.setTipoAgrupacion((Valor)cmbTipoAgrupEquipo.getValue());
		equipo.setEstado((Valor)cmbEstadoEquipo.getValue());
		equipo.setDependencia((Dependencia) cmbDepartamento.getValue());
		
		if(cmbEquipo.getValue()!=null)
			equipo.setPadre((Equipo)cmbEquipo.getValue());
		
		equipo.validar();
		
		if(flagNuevoEquipo)			
			equipoService.crear(equipo);
		else{
			equipo.setId(idEquipo);
			equipoService.actualizar(equipo);	
		}
		cmbEquipo.select(null);
		cmbDivision.select(null);
		cmbDepartamento.select(null);
		refrescar("equipo");
	}
	
	private void buttonClickEliminarEquipo(){

		Equipo equipo = new Equipo();
		equipo.setNombre((String)txtNombreEquipo.getValue());
		equipo.setEstado((Valor)cmbEstadoEquipo.getValue());
		equipo.setTipoAgrupacion((Valor)cmbTipoAgrupEquipo.getValue());
		
		Integrante integrante = new Integrante();
		integrante.setEquipo(equipo);
		List<Integrante> lstIntegrante = integranteService.buscar(integrante);
		
		if(lstIntegrante.size()>0)
			throw new ValidacionException(Constante.CODIGO_MENSAJE.VALIDAR_EQUIPO_ELIMINAR, new Object[]{equipo.getNombre()});
		else
			equipoService.eliminar(equipo);
		
		refrescar("equipo");
	}
	
	private void buttonClickGrabarIntegrante(){
		
		Integrante integrante = new Integrante();
		
		if(StringUtils.isNotBlank(txtIdIntegrante.getValue().toString())){
			integrante= integranteService.obtener(Long.parseLong(txtIdIntegrante.getValue().toString()));
		}
		
		integrante.setUsuario((Usuario) cboNombreIntegrante.getValue());
		
		Valor estadoInt = new Valor();
		estadoInt= (Valor)cboEstadoIntegrante.getValue();
		integrante.setEstado(estadoInt);
		
		Valor funcionInt = new Valor();
		funcionInt= (Valor)cboFuncionIntegrante.getValue();
		integrante.setFuncion(funcionInt);
		
		Equipo equipo = new Equipo();
		//equipo=equipoService.obtener(Long.parseLong(txtIdEquipo.getValue().toString()));
		integrante.setEquipo(equipo);

		/*if(!integrante.isEsLider()){
			if(chkLider.booleanValue()){
				List<Integrante> lideres = integranteService.obtenerLideres();
				int cont=0;
				for (Integrante integrante2 : lideres) {
					if(integrante.getEquipo().getId()==integrante2.getEquipo().getId())
						cont++;
				}
				if(cont==0)
					integrante.setEsLider(true);
				else
					throw new ValidacionException(Constante.CODIGO_MENSAJE.VALIDAR_EQUIPO_LIDER, new Object[] { integrante.getEquipo().getNombre()});
			}  
		}else{
			if(!chkLider.booleanValue()){
				integrante.setEsLider(false);
			}
		}			*/
		Usuario usuario=(Usuario)cboNombreIntegrante.getValue();

		if(flagNuevoIntegrante){
			//TODO Validar funcionamiento
			/*if(cboNombreIntegrante.getValue()!=null && cboEstadoIntegrante.getValue()!=null){
				integrante.setIntegrante(usuario);
				List<Integrante> integrantes = integranteService.buscar(null);
				for (Integrante integrante3 : integrantes) {
					if(integrante3.getIntegrante().getId()==usuario.getId()){
						throw new ValidacionException(Constante.CODIGO_MENSAJE.VALIDAR_VALOR_EXISTENTE,	new Object[] { usuario.getNombreCompleto()});
					}
					
				}
			}*/
			integranteService.crear(integrante);
		}
		else{
			if(integrante.getUsuario().getId()!=usuario.getId()){
				List<Integrante> integrantes = integranteService.buscar(null);
				for (Integrante integrante3 : integrantes) {
					if(integrante3.getUsuario().getId()==usuario.getId()){
						throw new ValidacionException(Constante.CODIGO_MENSAJE.VALIDAR_VALOR_EXISTENTE,	new Object[] { usuario.getNombres()});
					}
				}
			}
			integranteService.actualizar(integrante);
		}
		refrescar("integrante");
	
	}
	
	private void buttonClickEliminarIntegrante(){
		if(listaIds!=null && listaIds.size()>0){
            for(Long id:listaIds){
                integranteService.eliminarXId(id);
            }   
        }else{
            if(txtIdIntegrante.getValue()!=null){
                Long id=Long.parseLong(txtIdIntegrante.getValue().toString());
                integranteService.eliminarXId(id);
            }
        }
        
        refrescar("integrante");
	}
	
	@Deprecated
	private void buttonClickGrabarIntegrantes(){
		List<Integrante> lstIntegrantes = new ArrayList<Integrante>();
		Integrante integrante = new Integrante();
		
		Equipo equipo = new Equipo();
		//equipo=equipoService.obtener(Long.parseLong(txtIdEquipo.getValue().toString()));
				
		Valor estado = valorService.obtenerValor(Constante.LISTA.CODIGO.ESTADO, Constante.VALOR.CODIGO.ACTIVO);
		Valor funcion = new Valor();
		
		for (Object itemId : tblIntegrantes.getItemIds()) {
			Item item = tblIntegrantes.getItem(itemId);	
			integrante = new Integrante();
			integrante.setId(null);
			integrante.setEquipo(equipo);
			integrante.setEstado(estado);
			funcion = valorService.obtener((Long) item.getItemProperty("funcion.id").getValue());
			integrante.setFuncion(funcion);			
			integrante.setUsuario(usuarioService.obtener((Long) item.getItemProperty("integrante.id").getValue()));
			//integrante.setEsLider(false);
			lstIntegrantes.add(integrante);
		}
		
		//List<Integrante> lstIntegrantes2 = integranteService.registrarIntegrantes(lstIntegrantes); 
		//cargarIntegrantes(lstIntegrantes2, true);
	}	
	
	//** Utilitarios Globales **// 
	private void habilitarEliminacionMultiple(boolean selMultiple){
		if(selMultiple){
			txtIdIntegrante.setValue("");
			cboNombreIntegrante.setValue(null);
			cboNombreIntegrante.setEnabled(!selMultiple);
			cboEstadoIntegrante.setValue(null);
			cboEstadoIntegrante.setEnabled(!selMultiple);
			cboFuncionIntegrante.setEnabled(!selMultiple);
			chkLider.setValue(null);
			chkLider.setEnabled(!selMultiple);
			btnGrabarIntegrante.setVisible(!selMultiple);
			btnEliminarIntegrante.setVisible(selMultiple);
		}else{
			cboNombreIntegrante.setEnabled(!selMultiple);
			cboEstadoIntegrante.setEnabled(!selMultiple);
			cboFuncionIntegrante.setEnabled(!selMultiple);
			chkLider.setEnabled(!selMultiple);
			btnGrabarIntegrante.setVisible(!selMultiple);
			btnEliminarIntegrante.setVisible(selMultiple);
		}		
	}
	
	private void limpiar(String nombre){
		if(nombre.equals("equipo")){
			cmbTipoAgrupEquipo.setValue(null);
			cmbEquipo.setValue(null);
			txtNombreEquipo.setValue("");
			cmbEstadoEquipo.setValue(null);
			cmbDivision.setValue(null);
			cmbDepartamento.setValue(null);
			txtFiltroCodigoEquipo.setValue("");
			txtFiltroNombreEquipo.setValue("");		
			List<Integrante> lstIntegrantes = new ArrayList<Integrante>();
			cargarIntegrantes(lstIntegrantes, true);
			
		}else if(nombre.equals("integrante")){
			cboNombreIntegrante.setValue(null);
			cboEstadoIntegrante.setValue(null);
			cboFuncionIntegrante.setValue(null);
			txtIdIntegrante.setValue("");
			chkLider.setValue(false);
		}
	}
	
	private void refrescar(String nombre){
		habilitarEdicion(nombre,false);
		limpiar(nombre);
		if(nombre.equals("equipo")){
			listarEquipos();
			cargarEquiposPadres();
		}else if(nombre.equals("integrante")){
			Integrante nuevoInt = new Integrante();
			Equipo equipo = new Equipo();
			//equipo.setId(Long.parseLong(txtIdEquipo.getValue().toString()));
			nuevoInt.setEquipo(equipo);
			List<Integrante> lstIntegrantes = integranteService.buscar(nuevoInt);
			cargarIntegrantes(lstIntegrantes, true);
		}
	}
	
	private void habilitarEdicion(String nombre, boolean flag){
		if (nombre.equals("equipo")) {
			flagNuevoEquipo = !flag;
			btnEliminarEquipo.setVisible(flag);
			if (flag) {
				btnGrabarEquipo.setCaption("Actualizar");
			} else {
				btnGrabarEquipo.setCaption("Crear");
			}
		} else if (nombre.equals("integrante")) {
			flagNuevoIntegrante = !flag;
			btnEliminarIntegrante.setVisible(flag);
			if (flag) {
				btnGrabarIntegrante.setCaption("Actualizar");
			} else {
				btnGrabarIntegrante.setCaption("Crear");
			}
		}
	}
	
	//** Buscador de Filtros por Equipo **//
	private void shortCutEnter(Object sender, Object target){
		if(txtFiltroDivisionEquipo.equals(target) ||  txtFiltroDepartamentoEquipo.equals(target) || txtFiltroCodigoEquipo.equals(target) || txtFiltroNombreEquipo.equals(target) ){
			
			Equipo equipo = null;
			if(txtFiltroDivisionEquipo.equals(target)){
				equipo = new Equipo();
				if(StringUtils.isNotBlank(txtFiltroDivisionEquipo.getValue().toString())){					
					Dependencia dependencia = new Dependencia();
					Dependencia padre = new Dependencia();
					padre.setAbreviatura(txtFiltroDivisionEquipo.getValue().toString());
					dependencia.setPadre(padre);
					equipo.setDependencia(dependencia);
				}
				if(StringUtils.isNotBlank(txtFiltroDepartamentoEquipo.getValue().toString())){
					Dependencia departamento = new Dependencia();
					departamento.setAbreviatura(txtFiltroDepartamentoEquipo.getValue().toString());
					equipo.setDepartamento(departamento);
				}
				if(StringUtils.isNotBlank(txtFiltroNombreEquipo.getValue().toString())){
					equipo.setNombre(txtFiltroNombreEquipo.getValue().toString());
				}
				if(StringUtils.isNotBlank(txtFiltroCodigoEquipo.getValue().toString())){
					equipo.setCodigo(txtFiltroCodigoEquipo.getValue().toString());
				}							
			}
			
			if(txtFiltroDepartamentoEquipo.equals(target)){
				equipo = new Equipo();
				if(StringUtils.isNotBlank(txtFiltroDivisionEquipo.getValue().toString())){					
					Dependencia dependencia = new Dependencia();
					Dependencia padre = new Dependencia();
					padre.setAbreviatura(txtFiltroDivisionEquipo.getValue().toString());
					dependencia.setPadre(padre);
					equipo.setDependencia(dependencia);
				}				
				if(StringUtils.isNotBlank(txtFiltroDepartamentoEquipo.getValue().toString())){
					logger.debug("esto es departamento"+txtFiltroDepartamentoEquipo.getValue().toString());
					Dependencia departamento = new Dependencia();
					departamento.setAbreviatura(txtFiltroDepartamentoEquipo.getValue().toString());
					equipo.setDepartamento(departamento);
				}

				if(StringUtils.isNotBlank(txtFiltroNombreEquipo.getValue().toString())){
					equipo.setNombre(txtFiltroNombreEquipo.getValue().toString());
				}
				if(StringUtils.isNotBlank(txtFiltroCodigoEquipo.getValue().toString())){
					equipo.setCodigo(txtFiltroCodigoEquipo.getValue().toString());
				}	
			}
			
			if(txtFiltroNombreEquipo.equals(target)){
				equipo = new Equipo();
				if(StringUtils.isNotBlank(txtFiltroDivisionEquipo.getValue().toString())){
					Dependencia dependencia = new Dependencia();
					Dependencia padre = new Dependencia();
					padre.setAbreviatura(txtFiltroDivisionEquipo.getValue().toString());
					dependencia.setPadre(padre);
					equipo.setDependencia(dependencia);
				}
				if(StringUtils.isNotBlank(txtFiltroDepartamentoEquipo.getValue().toString())){
					Dependencia departamento = new Dependencia();
					departamento.setAbreviatura(txtFiltroDepartamentoEquipo.getValue().toString());
					equipo.setDepartamento(departamento);
				}
				if(StringUtils.isNotBlank(txtFiltroCodigoEquipo.getValue().toString())){
					equipo.setCodigo(txtFiltroCodigoEquipo.getValue().toString());
				}
				if(StringUtils.isNotBlank(txtFiltroNombreEquipo.getValue().toString())){
					equipo.setNombre(txtFiltroNombreEquipo.getValue().toString());
				}	
			}
			
			if(txtFiltroCodigoEquipo.equals(target)){
				equipo = new Equipo();
				if(StringUtils.isNotBlank(txtFiltroDivisionEquipo.getValue().toString())){
					Dependencia dependencia = new Dependencia();
					Dependencia padre = new Dependencia();
					padre.setAbreviatura(txtFiltroDivisionEquipo.getValue().toString());
					dependencia.setPadre(padre);
					equipo.setDependencia(dependencia);
				}
				if(StringUtils.isNotBlank(txtFiltroDepartamentoEquipo.getValue().toString())){
					Dependencia departamento = new Dependencia();
					departamento.setAbreviatura(txtFiltroDepartamentoEquipo.getValue().toString());
					equipo.setDepartamento(departamento);
				}				
				if(StringUtils.isNotBlank(txtFiltroCodigoEquipo.getValue().toString())){
					equipo.setCodigo(txtFiltroCodigoEquipo.getValue().toString());
				}
				if(StringUtils.isNotBlank(txtFiltroNombreEquipo.getValue().toString())){
					equipo.setNombre(txtFiltroNombreEquipo.getValue().toString());
				}					
			}
			
			if(equipo!=null){
				List<Equipo> lstEquipos = equipoService.buscar(equipo);
				Map<String,List<Equipo>> map = equipoService.filtrarEquipos(lstEquipos);
				cargarEquipos(map);
			}
		}
	}
	
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(false);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("-1px");
		
		// pnlPrincipal
		pnlPrincipal = buildPnlPrincipal();
		mainLayout.addComponent(pnlPrincipal);
		mainLayout.setComponentAlignment(pnlPrincipal, new Alignment(20));
		
		return mainLayout;
	}

	@AutoGenerated
	private VerticalLayout buildPnlPrincipal() {
		// common part: create layout
		pnlPrincipal = new VerticalLayout();
		pnlPrincipal.setImmediate(false);
		pnlPrincipal.setWidth("-1px");
		pnlPrincipal.setHeight("-1px");
		pnlPrincipal.setMargin(true);
		pnlPrincipal.setSpacing(true);
		
		// pnlEquipoContenido
		pnlEquipoContenido = buildPnlEquipoContenido();
		pnlPrincipal.addComponent(pnlEquipoContenido);
		
		// pnlValorContenido
		pnlValorContenido = buildPnlValorContenido();
		pnlPrincipal.addComponent(pnlValorContenido);
		
		// btnGrabarIntegrantes
		btnGrabarIntegrantes = new Button();
		btnGrabarIntegrantes.setCaption("Grabar los Integrantes");
		btnGrabarIntegrantes.setImmediate(true);
		btnGrabarIntegrantes.setWidth("-1px");
		btnGrabarIntegrantes.setHeight("-1px");
		pnlPrincipal.addComponent(btnGrabarIntegrantes);
		
		return pnlPrincipal;
	}

	@AutoGenerated
	private HorizontalLayout buildPnlEquipoContenido() {
		// common part: create layout
		pnlEquipoContenido = new HorizontalLayout();
		pnlEquipoContenido.setImmediate(false);
		pnlEquipoContenido.setWidth("-1px");
		pnlEquipoContenido.setHeight("-1px");
		pnlEquipoContenido.setMargin(true);
		pnlEquipoContenido.setSpacing(true);
		
		// pnlEquipos
		pnlEquipos = buildPnlEquipos();
		pnlEquipoContenido.addComponent(pnlEquipos);
		
		// pnlGrabarLista
		pnlGrabarLista = buildPnlGrabarLista();
		pnlEquipoContenido.addComponent(pnlGrabarLista);
		
		return pnlEquipoContenido;
	}

	@AutoGenerated
	private VerticalLayout buildPnlEquipos() {
		// common part: create layout
		pnlEquipos = new VerticalLayout();
		pnlEquipos.setImmediate(false);
		pnlEquipos.setWidth("-1px");
		pnlEquipos.setHeight("-1px");
		pnlEquipos.setMargin(false);
		
		// lblEquipos
		lblEquipos = new Label();
		lblEquipos.setStyleName("h2");
		lblEquipos.setImmediate(false);
		lblEquipos.setWidth("550px");
		lblEquipos.setHeight("-1px");
		lblEquipos.setValue("Equipos de trabajo");
		pnlEquipos.addComponent(lblEquipos);
		
		// pnlFiltrosEquipos
		pnlFiltrosEquipos = buildPnlFiltrosEquipos();
		pnlEquipos.addComponent(pnlFiltrosEquipos);
		
		// treeTblEquipo
		treeTblEquipo = new TreeTable();
		treeTblEquipo.setImmediate(false);
		treeTblEquipo.setWidth("540px");
		treeTblEquipo.setHeight("-1px");
		pnlEquipos.addComponent(treeTblEquipo);
		
		return pnlEquipos;
	}

	@AutoGenerated
	private HorizontalLayout buildPnlFiltrosEquipos() {
		// common part: create layout
		pnlFiltrosEquipos = new HorizontalLayout();
		pnlFiltrosEquipos.setImmediate(false);
		pnlFiltrosEquipos.setWidth("-1px");
		pnlFiltrosEquipos.setHeight("-1px");
		pnlFiltrosEquipos.setMargin(false);
		
		// txtFiltroDivisionEquipo
		txtFiltroDivisionEquipo = new TextField();
		txtFiltroDivisionEquipo.setImmediate(false);
		txtFiltroDivisionEquipo.setWidth("105px");
		txtFiltroDivisionEquipo.setHeight("-1px");
		txtFiltroDivisionEquipo.setInputPrompt("División");
		pnlFiltrosEquipos.addComponent(txtFiltroDivisionEquipo);
		
		// txtFiltroDepartamentoEquipo
		txtFiltroDepartamentoEquipo = new TextField();
		txtFiltroDepartamentoEquipo.setImmediate(false);
		txtFiltroDepartamentoEquipo.setWidth("95px");
		txtFiltroDepartamentoEquipo.setHeight("-1px");
		txtFiltroDepartamentoEquipo.setInputPrompt("Departamento");
		pnlFiltrosEquipos.addComponent(txtFiltroDepartamentoEquipo);
		
		// txtFiltroCodigoEquipo
		txtFiltroCodigoEquipo = new TextField();
		txtFiltroCodigoEquipo.setImmediate(false);
		txtFiltroCodigoEquipo.setDescription("Codigo del Equipo");
		txtFiltroCodigoEquipo.setWidth("110px");
		txtFiltroCodigoEquipo.setHeight("-1px");
		txtFiltroCodigoEquipo.setInputPrompt("Abreviatura");
		pnlFiltrosEquipos.addComponent(txtFiltroCodigoEquipo);
		
		// txtFiltroNombreEquipo
		txtFiltroNombreEquipo = new TextField();
		txtFiltroNombreEquipo.setImmediate(false);
		txtFiltroNombreEquipo.setWidth("185px");
		txtFiltroNombreEquipo.setHeight("-1px");
		txtFiltroNombreEquipo.setInputPrompt("Nombre del Equipo");
		pnlFiltrosEquipos.addComponent(txtFiltroNombreEquipo);
		
		return pnlFiltrosEquipos;
	}

	@AutoGenerated
	private VerticalLayout buildPnlGrabarLista() {
		// common part: create layout
		pnlGrabarLista = new VerticalLayout();
		pnlGrabarLista.setImmediate(false);
		pnlGrabarLista.setWidth("-1px");
		pnlGrabarLista.setHeight("-1px");
		pnlGrabarLista.setMargin(false);
		
		// lblEquipo
		lblEquipo = new Label();
		lblEquipo.setStyleName("h2");
		lblEquipo.setImmediate(false);
		lblEquipo.setWidth("100.0%");
		lblEquipo.setHeight("-1px");
		lblEquipo.setValue("Administración de Equipos");
		pnlGrabarLista.addComponent(lblEquipo);
		
		// pnlListaFila2
		pnlListaFila2 = buildPnlListaFila2();
		pnlGrabarLista.addComponent(pnlListaFila2);
		
		// pnlListaFila4
		pnlListaFila4 = buildPnlListaFila4();
		pnlGrabarLista.addComponent(pnlListaFila4);
		pnlGrabarLista.setComponentAlignment(pnlListaFila4, new Alignment(20));
		
		return pnlGrabarLista;
	}

	@AutoGenerated
	private VerticalLayout buildPnlListaFila2() {
		// common part: create layout
		pnlListaFila2 = new VerticalLayout();
		pnlListaFila2.setCaption(" ");
		pnlListaFila2.setImmediate(false);
		pnlListaFila2.setWidth("-1px");
		pnlListaFila2.setHeight("-1px");
		pnlListaFila2.setMargin(false);
		pnlListaFila2.setSpacing(true);
		
		// horizontalLayout_1
		horizontalLayout_1 = buildHorizontalLayout_1();
		pnlListaFila2.addComponent(horizontalLayout_1);
		
		// txtAbreviatura
		txtAbreviatura = new TextField();
		txtAbreviatura.setCaption("Abreviatura");
		txtAbreviatura.setImmediate(false);
		txtAbreviatura.setWidth("200px");
		txtAbreviatura.setHeight("-1px");
		txtAbreviatura.setRequired(true);
		pnlListaFila2.addComponent(txtAbreviatura);
		
		// txtNombreEquipo
		txtNombreEquipo = new TextField();
		txtNombreEquipo.setCaption("Nombre");
		txtNombreEquipo.setImmediate(false);
		txtNombreEquipo.setWidth("250px");
		txtNombreEquipo.setHeight("-1px");
		txtNombreEquipo.setRequired(true);
		txtNombreEquipo.setInputPrompt("Nombre del Equipo");
		pnlListaFila2.addComponent(txtNombreEquipo);
		
		// cmbDireccion
		cmbDireccion = new ComboBox();
		cmbDireccion.setCaption("Dirección");
		cmbDireccion.setImmediate(false);
		cmbDireccion.setWidth("250px");
		cmbDireccion.setHeight("-1px");
		cmbDireccion.setRequired(true);
		pnlListaFila2.addComponent(cmbDireccion);
		
		// cmbDivision
		cmbDivision = new ComboBox();
		cmbDivision.setCaption("División");
		cmbDivision.setImmediate(false);
		cmbDivision.setWidth("250px");
		cmbDivision.setHeight("-1px");
		cmbDivision.setRequired(true);
		pnlListaFila2.addComponent(cmbDivision);
		
		// cmbDepartamento
		cmbDepartamento = new ComboBox();
		cmbDepartamento.setCaption("Departamento");
		cmbDepartamento.setImmediate(false);
		cmbDepartamento.setWidth("250px");
		cmbDepartamento.setHeight("-1px");
		cmbDepartamento.setRequired(true);
		pnlListaFila2.addComponent(cmbDepartamento);
		
		// cmbEquipo
		cmbEquipo = new ComboBox();
		cmbEquipo.setCaption("Equipo");
		cmbEquipo.setImmediate(false);
		cmbEquipo.setWidth("250px");
		cmbEquipo.setHeight("-1px");
		pnlListaFila2.addComponent(cmbEquipo);
		
		return pnlListaFila2;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_1() {
		// common part: create layout
		horizontalLayout_1 = new HorizontalLayout();
		horizontalLayout_1.setImmediate(false);
		horizontalLayout_1.setWidth("-1px");
		horizontalLayout_1.setHeight("-1px");
		horizontalLayout_1.setMargin(false);
		horizontalLayout_1.setSpacing(true);
		
		// cmbTipoAgrupEquipo
		cmbTipoAgrupEquipo = new ComboBox();
		cmbTipoAgrupEquipo.setCaption("Tipo de Agrupacion");
		cmbTipoAgrupEquipo.setImmediate(false);
		cmbTipoAgrupEquipo.setWidth("140px");
		cmbTipoAgrupEquipo.setHeight("-1px");
		cmbTipoAgrupEquipo.setRequired(true);
		horizontalLayout_1.addComponent(cmbTipoAgrupEquipo);
		
		// cmbEstadoEquipo
		cmbEstadoEquipo = new ComboBox();
		cmbEstadoEquipo.setCaption("Estado");
		cmbEstadoEquipo.setImmediate(false);
		cmbEstadoEquipo.setWidth("100px");
		cmbEstadoEquipo.setHeight("-1px");
		cmbEstadoEquipo.setRequired(true);
		horizontalLayout_1.addComponent(cmbEstadoEquipo);
		
		return horizontalLayout_1;
	}

	@AutoGenerated
	private HorizontalLayout buildPnlListaFila4() {
		// common part: create layout
		pnlListaFila4 = new HorizontalLayout();
		pnlListaFila4.setCaption(" ");
		pnlListaFila4.setImmediate(false);
		pnlListaFila4.setWidth("-1px");
		pnlListaFila4.setHeight("-1px");
		pnlListaFila4.setMargin(false);
		pnlListaFila4.setSpacing(true);
		
		// btnGrabarEquipo
		btnGrabarEquipo = new Button();
		btnGrabarEquipo.setCaption("Actualizar");
		btnGrabarEquipo.setImmediate(true);
		btnGrabarEquipo.setWidth("-1px");
		btnGrabarEquipo.setHeight("-1px");
		pnlListaFila4.addComponent(btnGrabarEquipo);
		
		// btnEliminarEquipo
		btnEliminarEquipo = new Button();
		btnEliminarEquipo.setCaption("Eliminar");
		btnEliminarEquipo.setImmediate(true);
		btnEliminarEquipo.setWidth("-1px");
		btnEliminarEquipo.setHeight("-1px");
		pnlListaFila4.addComponent(btnEliminarEquipo);
		
		return pnlListaFila4;
	}

	@AutoGenerated
	private HorizontalLayout buildPnlValorContenido() {
		// common part: create layout
		pnlValorContenido = new HorizontalLayout();
		pnlValorContenido.setImmediate(false);
		pnlValorContenido.setWidth("-1px");
		pnlValorContenido.setHeight("-1px");
		pnlValorContenido.setMargin(false);
		
		// pnlIntegrantes
		pnlIntegrantes = buildPnlIntegrantes();
		pnlValorContenido.addComponent(pnlIntegrantes);
		
		// pnlGrabarIntegrante
		pnlGrabarIntegrante = buildPnlGrabarIntegrante();
		pnlValorContenido.addComponent(pnlGrabarIntegrante);
		
		return pnlValorContenido;
	}

	@AutoGenerated
	private VerticalLayout buildPnlIntegrantes() {
		// common part: create layout
		pnlIntegrantes = new VerticalLayout();
		pnlIntegrantes.setImmediate(false);
		pnlIntegrantes.setWidth("540px");
		pnlIntegrantes.setHeight("-1px");
		pnlIntegrantes.setMargin(false);
		
		// lblIntegrantes
		lblIntegrantes = new Label();
		lblIntegrantes.setImmediate(false);
		lblIntegrantes.setWidth("100.0%");
		lblIntegrantes.setHeight("-1px");
		lblIntegrantes.setValue("Integrantes por equipo");
		pnlIntegrantes.addComponent(lblIntegrantes);
		
		// pnlFiltroSBS
		pnlFiltroSBS = new HorizontalLayout();
		pnlFiltroSBS.setImmediate(false);
		pnlFiltroSBS.setWidth("-1px");
		pnlFiltroSBS.setHeight("-1px");
		pnlFiltroSBS.setMargin(false);
		pnlIntegrantes.addComponent(pnlFiltroSBS);
		
		// tblIntegrantes
		tblIntegrantes = new Table();
		tblIntegrantes.setImmediate(false);
		tblIntegrantes.setWidth("530px");
		tblIntegrantes.setHeight("250px");
		pnlIntegrantes.addComponent(tblIntegrantes);
		
		return pnlIntegrantes;
	}

	@AutoGenerated
	private VerticalLayout buildPnlGrabarIntegrante() {
		// common part: create layout
		pnlGrabarIntegrante = new VerticalLayout();
		pnlGrabarIntegrante.setImmediate(false);
		pnlGrabarIntegrante.setWidth("-1px");
		pnlGrabarIntegrante.setHeight("-1px");
		pnlGrabarIntegrante.setMargin(true);
		pnlGrabarIntegrante.setSpacing(true);
		
		// pnlValorFila2
		pnlValorFila2 = buildPnlValorFila2();
		pnlGrabarIntegrante.addComponent(pnlValorFila2);
		
		// pnlValorFila1
		pnlValorFila1 = buildPnlValorFila1();
		pnlGrabarIntegrante.addComponent(pnlValorFila1);
		
		// pnlValorFila3
		pnlValorFila3 = buildPnlValorFila3();
		pnlGrabarIntegrante.addComponent(pnlValorFila3);
		
		// pnlValorFila4
		pnlValorFila4 = buildPnlValorFila4();
		pnlGrabarIntegrante.addComponent(pnlValorFila4);
		
		// pnlValorFila5
		pnlValorFila5 = buildPnlValorFila5();
		pnlGrabarIntegrante.addComponent(pnlValorFila5);
		
		return pnlGrabarIntegrante;
	}

	@AutoGenerated
	private HorizontalLayout buildPnlValorFila2() {
		// common part: create layout
		pnlValorFila2 = new HorizontalLayout();
		pnlValorFila2.setCaption(" ");
		pnlValorFila2.setImmediate(false);
		pnlValorFila2.setWidth("-1px");
		pnlValorFila2.setHeight("-1px");
		pnlValorFila2.setMargin(false);
		pnlValorFila2.setSpacing(true);
		
		// txtIdIntegrante
		txtIdIntegrante = new TextField();
		txtIdIntegrante.setEnabled(false);
		txtIdIntegrante.setImmediate(false);
		txtIdIntegrante.setWidth("40px");
		txtIdIntegrante.setHeight("-1px");
		pnlValorFila2.addComponent(txtIdIntegrante);
		
		// cboEstadoIntegrante
		cboEstadoIntegrante = new ComboBox();
		cboEstadoIntegrante.setImmediate(false);
		cboEstadoIntegrante.setWidth("-1px");
		cboEstadoIntegrante.setHeight("-1px");
		cboEstadoIntegrante.setRequired(true);
		pnlValorFila2.addComponent(cboEstadoIntegrante);
		
		return pnlValorFila2;
	}

	@AutoGenerated
	private HorizontalLayout buildPnlValorFila1() {
		// common part: create layout
		pnlValorFila1 = new HorizontalLayout();
		pnlValorFila1.setImmediate(false);
		pnlValorFila1.setWidth("-1px");
		pnlValorFila1.setHeight("-1px");
		pnlValorFila1.setMargin(false);
		
		// cboFuncionIntegrante
		cboFuncionIntegrante = new ComboBox();
		cboFuncionIntegrante.setImmediate(false);
		cboFuncionIntegrante.setWidth("250px");
		cboFuncionIntegrante.setHeight("-1px");
		cboFuncionIntegrante.setRequired(true);
		pnlValorFila1.addComponent(cboFuncionIntegrante);
		
		return pnlValorFila1;
	}

	@AutoGenerated
	private HorizontalLayout buildPnlValorFila3() {
		// common part: create layout
		pnlValorFila3 = new HorizontalLayout();
		pnlValorFila3.setCaption(" ");
		pnlValorFila3.setImmediate(false);
		pnlValorFila3.setWidth("-1px");
		pnlValorFila3.setHeight("-1px");
		pnlValorFila3.setMargin(false);
		
		// cboNombreIntegrante
		cboNombreIntegrante = new ComboBox();
		cboNombreIntegrante.setImmediate(false);
		cboNombreIntegrante.setWidth("250px");
		cboNombreIntegrante.setHeight("-1px");
		cboNombreIntegrante.setRequired(true);
		pnlValorFila3.addComponent(cboNombreIntegrante);
		
		return pnlValorFila3;
	}

	@AutoGenerated
	private HorizontalLayout buildPnlValorFila4() {
		// common part: create layout
		pnlValorFila4 = new HorizontalLayout();
		pnlValorFila4.setCaption(" ");
		pnlValorFila4.setImmediate(false);
		pnlValorFila4.setWidth("-1px");
		pnlValorFila4.setHeight("-1px");
		pnlValorFila4.setMargin(false);
		
		// txtDescripcionSBS
		txtDescripcionSBS = new TextField();
		txtDescripcionSBS.setStyleName("fieldRequired");
		txtDescripcionSBS.setEnabled(false);
		txtDescripcionSBS.setImmediate(false);
		txtDescripcionSBS.setVisible(false);
		txtDescripcionSBS.setWidth("222px");
		txtDescripcionSBS.setHeight("-1px");
		txtDescripcionSBS.setInputPrompt("Glosa");
		pnlValorFila4.addComponent(txtDescripcionSBS);
		
		// chkLider
		chkLider = new CheckBox();
		chkLider.setCaption("¿Es líder?");
		chkLider.setImmediate(false);
		chkLider.setWidth("-1px");
		chkLider.setHeight("-1px");
		pnlValorFila4.addComponent(chkLider);
		
		return pnlValorFila4;
	}

	@AutoGenerated
	private HorizontalLayout buildPnlValorFila5() {
		// common part: create layout
		pnlValorFila5 = new HorizontalLayout();
		pnlValorFila5.setCaption(" ");
		pnlValorFila5.setImmediate(false);
		pnlValorFila5.setWidth("320px");
		pnlValorFila5.setHeight("-1px");
		pnlValorFila5.setMargin(false);
		
		// btnGrabarIntegrante
		btnGrabarIntegrante = new Button();
		btnGrabarIntegrante.setCaption("Actualizar");
		btnGrabarIntegrante.setImmediate(true);
		btnGrabarIntegrante.setWidth("-1px");
		btnGrabarIntegrante.setHeight("-1px");
		pnlValorFila5.addComponent(btnGrabarIntegrante);
		
		// btnEliminarIntegrante
		btnEliminarIntegrante = new Button();
		btnEliminarIntegrante.setCaption("Eliminar");
		btnEliminarIntegrante.setImmediate(true);
		btnEliminarIntegrante.setWidth("-1px");
		btnEliminarIntegrante.setHeight("-1px");
		pnlValorFila5.addComponent(btnEliminarIntegrante);
		
		return pnlValorFila5;
	}

}
