package pe.gob.mininter.dirandro.vaadin.panel;

import java.util.List;

import org.apache.commons.lang.StringUtils;

import pe.gob.mininter.dirandro.model.Distrito;
import pe.gob.mininter.dirandro.model.Entidad;
import pe.gob.mininter.dirandro.model.Opcion;
import pe.gob.mininter.dirandro.model.Parametro;
import pe.gob.mininter.dirandro.model.Valor;
import pe.gob.mininter.dirandro.service.EntidadService;
import pe.gob.mininter.dirandro.service.ParametroService;
import pe.gob.mininter.dirandro.service.ValorService;
import pe.gob.mininter.dirandro.util.Constante;
import pe.gob.mininter.dirandro.vaadin.util.HarecComponent;
import pe.gob.mininter.dirandro.vaadin.util.Injector;
import pe.gob.mininter.dirandro.vaadin.util.ValidateLimit;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.data.util.IndexedContainer;
import com.vaadin.event.FieldEvents.TextChangeEvent;
import com.vaadin.event.FieldEvents.TextChangeListener;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

public class PanelMantenEntidad extends HarecComponent implements TextChangeListener, ClickListener {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;

	@AutoGenerated
	private VerticalLayout pnlLayout;

	@AutoGenerated
	private HorizontalLayout pnlContenidoLayout;

	@AutoGenerated
	private VerticalLayout pnlParametroContenido;

	@AutoGenerated
	private HorizontalLayout pnlBotonContenido;

	@AutoGenerated
	private Button btnEliminarEntidad;

	@AutoGenerated
	private Button btnGestionEntidad;

	@AutoGenerated
	private ComboBox cmbEstado;

	@AutoGenerated
	private TextArea txtCorreo;

	@AutoGenerated
	private ComboBox cmbDirtePol;

	@AutoGenerated
	private TextField txtTelefono;

	@AutoGenerated
	private ComboBox cmbDistrito;

	@AutoGenerated
	private ComboBox cmbProvincia;

	@AutoGenerated
	private ComboBox cmbDepartamento;

	@AutoGenerated
	private TextField txtDireccion;

	@AutoGenerated
	private TextArea txtDescripcion;

	@AutoGenerated
	private TextField txtNombre;

	@AutoGenerated
	private ComboBox cmbTipoEntidad;

	@AutoGenerated
	private Label lblEntidad;

	@AutoGenerated
	private VerticalLayout pnlTablaContenido;

	@AutoGenerated
	private VerticalLayout pnlTabla;

	@AutoGenerated
	private Table tblParametro;

	@AutoGenerated
	private HorizontalLayout pnlFiltroTabla;

	@AutoGenerated
	private TextField txtFiltroNombre;

	@AutoGenerated
	private TextField txtFiltroTipo;

	@AutoGenerated
	private Label lblFiltroBusqueda;

	private static final long serialVersionUID = -5744214819591057526L;
		
	private ValorService valorService;
	
	private ParametroService parametroService;
	
	private EntidadService entidadService;
	
	
	private boolean flagNuevo;
	
	private List<Valor> estados;
	
	private String codigo;

	public PanelMantenEntidad(List<Opcion> acciones, String height) {
		super(acciones, height);
		buildMainLayout();
		setCompositionRoot(mainLayout);

		valorService = Injector.obtenerServicio(ValorService.class);
		parametroService = Injector.obtenerServicio(ParametroService.class);
		entidadService = Injector.obtenerServicio(EntidadService.class);
		postConstruct();
		debugId();
	}

	private void debugId(){
		mainLayout.setDebugId("mainLayout");
		pnlLayout.setDebugId("pnlLayout");
		pnlContenidoLayout.setDebugId("pnlContenidoLayout");
		pnlParametroContenido.setDebugId("pnlParametroContenido");
		pnlBotonContenido.setDebugId("pnlBotonContenido");
		btnEliminarEntidad.setDebugId("btnEliminarEntidad");
		btnGestionEntidad.setDebugId("btnGestionEntidad");
		cmbEstado.setDebugId("cmbEstado");
		txtCorreo.setDebugId("txtValor");
		txtDescripcion.setDebugId("txtADescripcion");
		txtNombre.setDebugId("txtNombre");
		txtDireccion.setDebugId("txtDireccion");
		lblEntidad.setDebugId("lblEntidad");
		pnlTablaContenido.setDebugId("pnlTablaContenido");
		pnlTabla.setDebugId("pnlTabla");
		tblParametro.setDebugId("tblParametro");
		pnlFiltroTabla.setDebugId("pnlFiltroTabla");
		
		txtFiltroNombre.setDebugId("txtFiltroNombre");
		txtFiltroTipo.setDebugId("txtFiltroTipo");
	}

	public void postConstruct() {
		habilitarEdicion(false);
		pnlLayout.setStyleName("backColor");
		//List<Parametro> parametros = parametroService.buscar(null);
		//cargarParametros(parametros, true);
		
		List<Entidad> parametros = entidadService.buscar(null);
		cargarParametros(parametros, true);
		
		tblParametro.setSelectable(true);
		tblParametro.setImmediate(true);
		tblParametro.setNullSelectionAllowed(true);
		tblParametro.setNullSelectionItemId(null);
		txtDescripcion.setNullRepresentation("");
		
		tblParametro.addListener(new ValueChangeListener() {
			
			private static final long serialVersionUID = 7962790507398071986L;

			@Override
			public void valueChange(ValueChangeEvent event) {
				boolean esModoNuevo = tblParametro.getValue() == null;
				if(esModoNuevo){
					tblParametro.setValue(null);
					habilitarEdicion(!esModoNuevo);
					limpiar();
				}
				else{
					Item item = tblParametro.getItem(tblParametro.getValue());
					codigo=(String)item.getItemProperty("codigo").getValue();
					txtDireccion.setValue(item.getItemProperty("direccion").getValue());
					txtNombre.setValue(item.getItemProperty("nombre").getValue());
					txtDescripcion.setValue(item.getItemProperty("descripcion").getValue());
					txtCorreo.setValue(item.getItemProperty("valor").getValue());
					
					String estadoSel=(String)item.getItemProperty("estado.nombre").getValue();

					for (Valor estado : estados) {
						if(estado.getNombre().equals(estadoSel)){
							cmbEstado.select(estado);
							break;
						}
					}
					habilitarEdicion(!esModoNuevo);
				}
			}
		});
		
		cmbEstado.setInputPrompt("Estado");				
		estados = valorService.obtenerLista(Constante.LISTA.CODIGO.ESTADO);		
		BeanItemContainer<Valor> bicEstados = new BeanItemContainer<Valor>(Valor.class,  estados);		
		cmbEstado.setContainerDataSource(bicEstados);		
		cmbEstado.setItemCaptionPropertyId("nombre");
		
		cmbTipoEntidad.setInputPrompt("Tipo Entidad");				
		estados = valorService.obtenerLista(Constante.LISTA.CODIGO.ENTIDAD_TIPO);		
		BeanItemContainer<Valor> bicEntidades_Tipo = new BeanItemContainer<Valor>(Valor.class,  estados);		
		cmbTipoEntidad.setContainerDataSource(bicEntidades_Tipo);		
		cmbTipoEntidad.setItemCaptionPropertyId("nombre");
		
		txtFiltroTipo.setImmediate(true);
		txtFiltroNombre.setImmediate(true);
		
		
		txtFiltroTipo.addListener((TextChangeListener)this);
		txtFiltroNombre.addListener((TextChangeListener)this);
		
		
		btnGestionEntidad.addListener((ClickListener)this);
		btnEliminarEntidad.addListener((ClickListener)this);
		
		txtDescripcion.addListener(new ValidateLimit(txtDescripcion, 250));
		txtDireccion.addListener(new ValidateLimit(txtDireccion, 15));
		txtNombre.addListener(new ValidateLimit(txtNombre, 90));
		txtCorreo.addListener(new ValidateLimit(txtCorreo, 250));

	}	
	
	private void habilitarEdicion(boolean flag){
		flagNuevo = !flag;
		btnEliminarEntidad.setVisible(flag);
		if(flag)		
			btnGestionEntidad.setCaption("Actualizar");		
		else		
			btnGestionEntidad.setCaption("Crear");
	}
	
	private void limpiar(){
		txtDireccion.setValue("");
		txtNombre.setValue("");
		txtDescripcion.setValue("");
		txtCorreo.setValue("");
		cmbEstado.setValue(null);
	}
	
	private void cargarParametros(List<Entidad> entidades, boolean flagLimpiar){
		IndexedContainer container = new IndexedContainer();
		
		container.addContainerProperty("tipo", String.class,  null);
		container.addContainerProperty("nombre", String.class,  null);
		//container.addContainerProperty("descripcion", String.class,  null);
		//container.addContainerProperty("valor", String.class,  null);
		//container.addContainerProperty("estado.nombre", String.class,  null);
		
		int con=1;
		for (Entidad e : entidades) {
			Item item = container.addItem(con++);
            item.getItemProperty("tipo").setValue(e.getTipo().getNombre());
            item.getItemProperty("nombre").setValue(e.getNombre());
            //item.getItemProperty("descripcion").setValue(parametro.getDescripcion());
            //item.getItemProperty("valor").setValue(parametro.getValor());
            //item.getItemProperty("estado.nombre").setValue(parametro.getEstado() == null ? null :parametro.getEstado().getNombre());
		}
		
		tblParametro.setContainerDataSource(container);
		tblParametro.setVisibleColumns(new Object[]{"tipo", "nombre"});
		tblParametro.setColumnWidth("tipo", 150);
		tblParametro.setColumnWidth("nombre", 260);
		//tblParametro.setColumnWidth("valor", 137);
		//tblParametro.setColumnWidth("estado.nombre", 105);
		tblParametro.setColumnHeader("tipo", "Tipo");
		tblParametro.setColumnHeader("nombre", "Nombre");
		//tblParametro.setColumnHeader("valor", "Valor");
		//tblParametro.setColumnHeader("estado.nombre", "Estado");
		
		if(flagLimpiar){
			txtFiltroTipo.setValue("");
			txtFiltroNombre.setValue("");
			
		}
		
	}
	
	private void cargarParametros_Old(List<Parametro> parametros, boolean flagLimpiar){
		IndexedContainer container = new IndexedContainer();
		
		container.addContainerProperty("codigo", String.class,  null);
		container.addContainerProperty("nombre", String.class,  null);
		container.addContainerProperty("descripcion", String.class,  null);
		container.addContainerProperty("valor", String.class,  null);
		container.addContainerProperty("estado.nombre", String.class,  null);
		
		int con=1;
		for (Parametro parametro : parametros) {
			Item item = container.addItem(con++);
            item.getItemProperty("codigo").setValue(parametro.getCodigo());
            item.getItemProperty("nombre").setValue(parametro.getNombre());
            item.getItemProperty("descripcion").setValue(parametro.getDescripcion());
            item.getItemProperty("valor").setValue(parametro.getValor());
            item.getItemProperty("estado.nombre").setValue(parametro.getEstado() == null ? null :parametro.getEstado().getNombre());
		}
		
		tblParametro.setContainerDataSource(container);
		tblParametro.setVisibleColumns(new Object[]{"codigo", "nombre", "valor", "estado.nombre"});
		tblParametro.setColumnWidth("codigo", 92);
		tblParametro.setColumnWidth("nombre", 187);
		tblParametro.setColumnWidth("valor", 137);
		tblParametro.setColumnWidth("estado.nombre", 105);
		tblParametro.setColumnHeader("codigo", "Código");
		tblParametro.setColumnHeader("nombre", "Nombre");
		tblParametro.setColumnHeader("valor", "Valor");
		tblParametro.setColumnHeader("estado.nombre", "Estado");
		
		if(flagLimpiar){
			txtFiltroTipo.setValue("");
			txtFiltroNombre.setValue("");
			
		}
		
	}

	@Override
	public void textChange(TextChangeEvent event) {
		//Parametro parametro = new Parametro();
		Entidad e = new Entidad();
		if(event.getSource().equals(txtFiltroTipo))
		{
			if(StringUtils.isNotBlank(event.getText()))
			{
				Valor tipo = new Valor();
				tipo.setNombre(event.getText());
				e.setTipo(tipo);
			}
			if(StringUtils.isNotBlank(txtFiltroNombre.getValue().toString()))
			{
				e.setNombre(txtFiltroNombre.getValue().toString());
			}
		}
		if(event.getSource().equals(txtFiltroNombre))
		{
			if(StringUtils.isNotBlank(event.getText()))
			{
				Valor tipo = new Valor();
				tipo.setNombre(event.getText());
				e.setTipo(tipo);
			}
			if(StringUtils.isNotBlank(txtFiltroNombre.getValue().toString()))
			{
				e.setNombre(txtFiltroNombre.getValue().toString());
			}
		}
		/*if(event.getSource().equals(txtFiltroValor))
		{
			if(StringUtils.isNotBlank(txtFiltroTipo.getValue().toString()))
			{
				parametro.setCodigo(txtFiltroTipo.getValue().toString());
			}
			if(StringUtils.isNotBlank(txtFiltroNombre.getValue().toString()))
			{
				parametro.setNombre(txtFiltroNombre.getValue().toString());
			}
			if(StringUtils.isNotBlank(event.getText()))
			{
				parametro.setValor(event.getText());
			}
			if(StringUtils.isNotBlank(txtFiltroEstado.getValue().toString()))
			{
				Valor estado = new Valor();
				estado.setNombre(txtFiltroEstado.getValue().toString());
				parametro.setEstado(estado);
			}
		}
		if(event.getSource().equals(txtFiltroEstado))
		{
			if(StringUtils.isNotBlank(txtFiltroTipo.getValue().toString()))
			{
				parametro.setCodigo(txtFiltroTipo.getValue().toString());
			}
			if(StringUtils.isNotBlank(txtFiltroNombre.getValue().toString()))
			{
				parametro.setNombre(txtFiltroNombre.getValue().toString());
			}
			if(StringUtils.isNotBlank(txtFiltroValor.getValue().toString()))
			{
				parametro.setValor(txtFiltroValor.getValue().toString());
			}
			if(StringUtils.isNotBlank(event.getText()))
			{
				Valor estado = new Valor();
				estado.setNombre(event.getText());
				parametro.setEstado(estado);
			}
		}*/
		
		//List<Parametro> parametros = parametroService.buscar(parametro);
		//cargarParametros(parametros, false);
		
		
		List<Entidad> entidades = entidadService.buscar(e);
		cargarParametros(entidades, true);
		
		
		
		limpiar();
		habilitarEdicion(false);
	}

	@Override
	public void buttonClick(ClickEvent event) {
		if(event.getButton().equals(btnGestionEntidad))
		{
			buttonClickGestion();
		}
		if(event.getButton().equals(btnEliminarEntidad))
		{
			buttonClickEliminar();
		}
	}
	
	private void buttonClickGestion(){

		/*
		Parametro parametro = new Parametro();
		parametro.setCodigo(txtDireccion.getValue().toString().trim());
		parametro.setNombre(txtNombre.getValue().toString().trim());
		parametro.setDescripcion(StringUtils.trimToEmpty(txtDescripcion.getValue() != null ? txtDescripcion.getValue().toString() : StringUtils.EMPTY));
		parametro.setValor(txtCorreo.getValue().toString().trim());			
		parametro.setEstado((Valor) cmbEstado.getValue());
		
		if(flagNuevo)
		{
			parametroService.crear(parametro);
		}
		else
		{
			parametro.setCodigoAnterior(codigo);
			parametroService.actualizar(parametro);
		}*/
		
		Entidad e = new Entidad();
						
		e.setTipo((Valor)cmbTipoEntidad.getValue());
		e.setNombre(StringUtils.trimToEmpty(txtNombre.getValue() != null ? txtNombre.getValue().toString() : StringUtils.EMPTY));
		e.setDescripcion(StringUtils.trimToEmpty(txtDescripcion.getValue() != null ? txtDescripcion.getValue().toString() : StringUtils.EMPTY));
		e.setDireccion(StringUtils.trimToEmpty(txtDireccion.getValue() != null ? txtDireccion.getValue().toString() : StringUtils.EMPTY));	
		//Distrito distrito = new Distrito();
		//distrito.setId(100);
		e.setUbgDistrito(null);
		e.setTelefono(StringUtils.trimToEmpty(this.txtTelefono.getValue() != null ? this.txtTelefono.getValue().toString() : StringUtils.EMPTY));
		e.setDirtepol(null);
		e.setCorreo(StringUtils.trimToEmpty(this.txtCorreo.getValue() != null ? this.txtCorreo.getValue().toString() : StringUtils.EMPTY));
		e.setEstado((Valor) cmbEstado.getValue());
		
		if(flagNuevo)
		{
			entidadService.crear(e);
		}
		else
		{
			//e.setCodigoAnterior(codigo);
			entidadService.actualizar(e);
		}
		
		refrescar();
	}
	
	private void buttonClickEliminar(){

		parametroService.eliminarXId(txtDireccion.getValue().toString());
		refrescar();
		
	
	}
	
	private void refrescar()
	{
		habilitarEdicion(false);
		limpiar();
		
		//List<Parametro> parametros = parametroService.buscar(null);
		//cargarParametros(parametros, true);
		
		List<Entidad> entidades = entidadService.buscar(null);
		cargarParametros(entidades, true);
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// pnlLayout
		pnlLayout = buildPnlLayout();
		mainLayout.addComponent(pnlLayout);
		mainLayout.setComponentAlignment(pnlLayout, new Alignment(20));
		
		return mainLayout;
	}

	@AutoGenerated
	private VerticalLayout buildPnlLayout() {
		// common part: create layout
		pnlLayout = new VerticalLayout();
		pnlLayout.setImmediate(false);
		pnlLayout.setWidth("-1px");
		pnlLayout.setHeight("-1px");
		pnlLayout.setMargin(true);
		pnlLayout.setSpacing(true);
		
		// pnlContenidoLayout
		pnlContenidoLayout = buildPnlContenidoLayout();
		pnlLayout.addComponent(pnlContenidoLayout);
		
		return pnlLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildPnlContenidoLayout() {
		// common part: create layout
		pnlContenidoLayout = new HorizontalLayout();
		pnlContenidoLayout.setImmediate(false);
		pnlContenidoLayout.setWidth("-1px");
		pnlContenidoLayout.setHeight("-1px");
		pnlContenidoLayout.setMargin(true);
		
		// pnlTablaContenido
		pnlTablaContenido = buildPnlTablaContenido();
		pnlContenidoLayout.addComponent(pnlTablaContenido);
		
		// pnlParametroContenido
		pnlParametroContenido = buildPnlParametroContenido();
		pnlContenidoLayout.addComponent(pnlParametroContenido);
		pnlContenidoLayout.setExpandRatio(pnlParametroContenido, 1.0f);
		
		return pnlContenidoLayout;
	}

	@AutoGenerated
	private VerticalLayout buildPnlTablaContenido() {
		// common part: create layout
		pnlTablaContenido = new VerticalLayout();
		pnlTablaContenido.setImmediate(false);
		pnlTablaContenido.setWidth("620px");
		pnlTablaContenido.setHeight("-1px");
		pnlTablaContenido.setMargin(false);
		
		// lblFiltroBusqueda
		lblFiltroBusqueda = new Label();
		lblFiltroBusqueda.setStyleName("h1");
		lblFiltroBusqueda.setImmediate(false);
		lblFiltroBusqueda.setWidth("-1px");
		lblFiltroBusqueda.setHeight("-1px");
		lblFiltroBusqueda.setValue("Filtro de Busqueda de Entidades");
		pnlTablaContenido.addComponent(lblFiltroBusqueda);
		
		// pnlFiltroTabla
		pnlFiltroTabla = buildPnlFiltroTabla();
		pnlTablaContenido.addComponent(pnlFiltroTabla);
		
		// pnlTabla
		pnlTabla = buildPnlTabla();
		pnlTablaContenido.addComponent(pnlTabla);
		
		return pnlTablaContenido;
	}

	@AutoGenerated
	private HorizontalLayout buildPnlFiltroTabla() {
		// common part: create layout
		pnlFiltroTabla = new HorizontalLayout();
		pnlFiltroTabla.setImmediate(false);
		pnlFiltroTabla.setWidth("-1px");
		pnlFiltroTabla.setHeight("-1px");
		pnlFiltroTabla.setMargin(false);
		
		// txtFiltroTipo
		txtFiltroTipo = new TextField();
		txtFiltroTipo.setImmediate(false);
		txtFiltroTipo.setWidth("165px");
		txtFiltroTipo.setHeight("-1px");
		txtFiltroTipo.setInputPrompt("Tipo");
		pnlFiltroTabla.addComponent(txtFiltroTipo);
		
		// txtFiltroNombre
		txtFiltroNombre = new TextField();
		txtFiltroNombre.setImmediate(false);
		txtFiltroNombre.setWidth("270px");
		txtFiltroNombre.setHeight("-1px");
		txtFiltroNombre.setInputPrompt("Nombre");
		pnlFiltroTabla.addComponent(txtFiltroNombre);
		
		return pnlFiltroTabla;
	}

	@AutoGenerated
	private VerticalLayout buildPnlTabla() {
		// common part: create layout
		pnlTabla = new VerticalLayout();
		pnlTabla.setImmediate(false);
		pnlTabla.setWidth("-1px");
		pnlTabla.setHeight("-1px");
		pnlTabla.setMargin(false);
		
		// tblParametro
		tblParametro = new Table();
		tblParametro.setImmediate(false);
		tblParametro.setWidth("600px");
		tblParametro.setHeight("300px");
		pnlTabla.addComponent(tblParametro);
		
		return pnlTabla;
	}

	@AutoGenerated
	private VerticalLayout buildPnlParametroContenido() {
		// common part: create layout
		pnlParametroContenido = new VerticalLayout();
		pnlParametroContenido.setImmediate(false);
		pnlParametroContenido.setWidth("-1px");
		pnlParametroContenido.setHeight("-1px");
		pnlParametroContenido.setMargin(false);
		pnlParametroContenido.setSpacing(true);
		
		// lblEntidad
		lblEntidad = new Label();
		lblEntidad.setStyleName("h1");
		lblEntidad.setImmediate(false);
		lblEntidad.setWidth("-1px");
		lblEntidad.setHeight("-1px");
		lblEntidad.setValue("Administración de Entidades");
		pnlParametroContenido.addComponent(lblEntidad);
		
		// cmbTipoEntidad
		cmbTipoEntidad = new ComboBox();
		cmbTipoEntidad.setCaption("Tipo");
		cmbTipoEntidad.setImmediate(false);
		cmbTipoEntidad.setWidth("-1px");
		cmbTipoEntidad.setHeight("-1px");
		pnlParametroContenido.addComponent(cmbTipoEntidad);
		
		// txtNombre
		txtNombre = new TextField();
		txtNombre.setCaption(" Nombre");
		txtNombre.setImmediate(false);
		txtNombre.setWidth("250px");
		txtNombre.setHeight("-1px");
		txtNombre.setRequired(true);
		txtNombre.setInputPrompt("Nombre de la Entidad");
		pnlParametroContenido.addComponent(txtNombre);
		
		// txtDescripcion
		txtDescripcion = new TextArea();
		txtDescripcion.setCaption(" Descripción");
		txtDescripcion.setImmediate(false);
		txtDescripcion.setWidth("255px");
		txtDescripcion.setHeight("42px");
		txtDescripcion.setRequired(true);
		txtDescripcion.setInputPrompt("Descripción de la entidad");
		pnlParametroContenido.addComponent(txtDescripcion);
		
		// txtDireccion
		txtDireccion = new TextField();
		txtDireccion.setCaption("Dirección");
		txtDireccion.setImmediate(false);
		txtDireccion.setWidth("150px");
		txtDireccion.setHeight("-1px");
		txtDireccion.setRequired(true);
		txtDireccion.setInputPrompt("Dirección");
		pnlParametroContenido.addComponent(txtDireccion);
		
		// cmbDepartamento
		cmbDepartamento = new ComboBox();
		cmbDepartamento.setCaption("Departamento");
		cmbDepartamento.setImmediate(false);
		cmbDepartamento.setWidth("-1px");
		cmbDepartamento.setHeight("-1px");
		pnlParametroContenido.addComponent(cmbDepartamento);
		
		// cmbProvincia
		cmbProvincia = new ComboBox();
		cmbProvincia.setCaption("Provincia");
		cmbProvincia.setImmediate(false);
		cmbProvincia.setWidth("-1px");
		cmbProvincia.setHeight("-1px");
		pnlParametroContenido.addComponent(cmbProvincia);
		
		// cmbDistrito
		cmbDistrito = new ComboBox();
		cmbDistrito.setCaption("Distrito");
		cmbDistrito.setImmediate(false);
		cmbDistrito.setWidth("-1px");
		cmbDistrito.setHeight("-1px");
		pnlParametroContenido.addComponent(cmbDistrito);
		
		// txtTelefono
		txtTelefono = new TextField();
		txtTelefono.setCaption("Teléfono");
		txtTelefono.setImmediate(false);
		txtTelefono.setWidth("250px");
		txtTelefono.setHeight("-1px");
		txtTelefono.setInputPrompt("Número de teléfono asociado a la entidad");
		pnlParametroContenido.addComponent(txtTelefono);
		
		// cmbDirtePol
		cmbDirtePol = new ComboBox();
		cmbDirtePol.setCaption("Dirtepol");
		cmbDirtePol.setImmediate(false);
		cmbDirtePol.setWidth("-1px");
		cmbDirtePol.setHeight("-1px");
		pnlParametroContenido.addComponent(cmbDirtePol);
		
		// txtCorreo
		txtCorreo = new TextArea();
		txtCorreo.setCaption("Correo");
		txtCorreo.setImmediate(false);
		txtCorreo.setWidth("255px");
		txtCorreo.setHeight("42px");
		txtCorreo.setInputPrompt("Correo electrónico");
		pnlParametroContenido.addComponent(txtCorreo);
		
		// cmbEstado
		cmbEstado = new ComboBox();
		cmbEstado.setCaption("Estado");
		cmbEstado.setImmediate(false);
		cmbEstado.setWidth("-1px");
		cmbEstado.setHeight("-1px");
		cmbEstado.setRequired(true);
		pnlParametroContenido.addComponent(cmbEstado);
		
		// pnlBotonContenido
		pnlBotonContenido = buildPnlBotonContenido();
		pnlParametroContenido.addComponent(pnlBotonContenido);
		pnlParametroContenido.setComponentAlignment(pnlBotonContenido,
				new Alignment(20));
		
		return pnlParametroContenido;
	}

	@AutoGenerated
	private HorizontalLayout buildPnlBotonContenido() {
		// common part: create layout
		pnlBotonContenido = new HorizontalLayout();
		pnlBotonContenido.setImmediate(false);
		pnlBotonContenido.setWidth("-1px");
		pnlBotonContenido.setHeight("-1px");
		pnlBotonContenido.setMargin(true);
		pnlBotonContenido.setSpacing(true);
		
		// btnGestionEntidad
		btnGestionEntidad = new Button();
		btnGestionEntidad.setCaption("Crear");
		btnGestionEntidad.setImmediate(true);
		btnGestionEntidad.setWidth("-1px");
		btnGestionEntidad.setHeight("-1px");
		pnlBotonContenido.addComponent(btnGestionEntidad);
		
		// btnEliminarEntidad
		btnEliminarEntidad = new Button();
		btnEliminarEntidad.setCaption("Eliminar");
		btnEliminarEntidad.setImmediate(true);
		btnEliminarEntidad.setWidth("-1px");
		btnEliminarEntidad.setHeight("-1px");
		pnlBotonContenido.addComponent(btnEliminarEntidad);
		
		return pnlBotonContenido;
	}

}
