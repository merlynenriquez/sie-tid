package pe.gob.mininter.dirandro.vaadin.panel;

import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.MessageFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.StringUtils;

import pe.gob.mininter.dirandro.dao.hibernate.impl.ExpedientePersonaHibernateImpl;
import pe.gob.mininter.dirandro.model.DetExpedientePersona;
import pe.gob.mininter.dirandro.model.Droga;
import pe.gob.mininter.dirandro.model.Empresa;
import pe.gob.mininter.dirandro.model.Expediente;
import pe.gob.mininter.dirandro.model.ModeloMarca;
import pe.gob.mininter.dirandro.model.Organizacion;
import pe.gob.mininter.dirandro.model.Persona;
import pe.gob.mininter.dirandro.service.EmpresaService;
import pe.gob.mininter.dirandro.service.ExpedientePersonaService;
import pe.gob.mininter.dirandro.service.ExpedienteService;
import pe.gob.mininter.dirandro.service.OrganizacionService;
import pe.gob.mininter.dirandro.service.PersonaService;
import pe.gob.mininter.dirandro.util.Constante;
import pe.gob.mininter.dirandro.vaadin.util.ComboBoxLOVS;
import pe.gob.mininter.dirandro.vaadin.util.Injector;
import pe.gob.mininter.dirandro.vaadin.util.listener.PanelAgregarEmpresaListener;
import pe.gob.mininter.dirandro.vaadin.util.listener.PanelAgregarPersonaListener;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.data.util.IndexedContainer;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.OptionGroup;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;

public class PanelRegistroParteInterviniente extends CustomComponent implements
		ClickListener, PanelAgregarPersonaListener, PanelAgregarEmpresaListener {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private VerticalLayout verticalLayout_3;
	@AutoGenerated
	private Table tblIntervinientes;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_34;
	@AutoGenerated
	private Button btnRIAgregar;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_1;
	@AutoGenerated
	private TextField txtInterAlias;
	@AutoGenerated
	private ComboBoxLOVS cmbInterSituacion;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_32;
	@AutoGenerated
	private PopupDateField dtInterFechaInter;
	@AutoGenerated
	private ComboBoxLOVS cmbInterOcupacion;
	@AutoGenerated
	private ComboBox cmbInterOrganizacion;
	@AutoGenerated
	private ComboBoxLOVS cmbInterEstadoDato;
	@AutoGenerated
	private HorizontalLayout lytDatos;
	@AutoGenerated
	private Label lblDatosInterviniente;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_3;
	@AutoGenerated
	private Button btnRIBuscar;
	@AutoGenerated
	private ComboBox cmbRiIntervinientes;
	@AutoGenerated
	private OptionGroup rbTipoInterviniente;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private static final long serialVersionUID = 5321154660254559464L;

	private PersonaService personaService;
	private EmpresaService empresaService;
	private ExpedientePersonaService expedientePersonaService;
	private OrganizacionService organizacionService;

	private Expediente expediente;
	private List<Empresa> lstEmpresas;
	private List<Persona> lstPersonas;

	private static final String OPCION_PERSONA = "Persona";
	private static final String OPCION_EMPRESA = "Empresa";

	private String listaSeleccionada = OPCION_PERSONA;

	private IndexedContainer container;

	private static final String COLUMN_TIPO_INTERVINIENTE = "COLUMN_TIPO_INTERVINIENTE";
	private static final String COLUMN_INTERVINIENTE = "COLUMN_INTERVINIENTE";
	private static final String COLUMN_ESTADO_DATO = "COLUMN_ESTADO_DATO";
	private static final String COLUMN_ORGANIZACION = "COLUMN_ORGANIZACION";
	private static final String COLUMN_OCUPACION = "COLUMN_OCUPACION";
	private static final String COLUMN_FECHA_INTERVENCION = "COLUMN_FECHA_INTERVENCION";
	private static final String COLUMN_SITUACION = "COLUMN_SITUACION";
	private static final String COLUMN_ALIAS = "COLUMN_ALIAS";
	private static final String COLUMN_EXP_INTERVINIENTE = "COLUMN_EXP_INTERVINIENTE";

	public PanelRegistroParteInterviniente() {
		buildMainLayout();

		personaService = Injector.obtenerServicio(PersonaService.class);
		empresaService = Injector.obtenerServicio(EmpresaService.class);
		organizacionService = Injector
				.obtenerServicio(OrganizacionService.class);
		expedientePersonaService = Injector
				.obtenerServicio(ExpedientePersonaService.class);

		setCompositionRoot(mainLayout);
		postConstruct();
	}

	@Override
	public void attach() {
		super.attach();
		if (expediente != null && !expediente.esNuevo()) {
			cargarIntervinientes();
		}
	}

	public void setExpediente(Expediente expediente) {
		this.expediente = expediente;
	}

	public void postConstruct() {

		cmbInterEstadoDato.setCodigoLista(Constante.LISTA.CODIGO.TIPO_EST_DATO);
		cmbInterOcupacion.setCodigoLista(Constante.LISTA.CODIGO.OCUP_INTERV);
		cmbInterSituacion.setCodigoLista(Constante.LISTA.CODIGO.SIT_PROCESADO);

		cargarCmbInterOrganizacion();

		btnRIBuscar.setIcon(Constante.ICONOS.CREATE);
		btnRIBuscar.addListener((ClickListener) this);
		// btnRIBuscar.setEnabled(false);
		btnRIAgregar.addListener((ClickListener) this);

		rbTipoInterviniente.addItem(OPCION_PERSONA);
		rbTipoInterviniente.addItem(OPCION_EMPRESA);
		rbTipoInterviniente.select(OPCION_PERSONA);
		rbTipoInterviniente.setImmediate(true);
		rbTipoInterviniente.addListener(new ValueChangeListener() {
			private static final long serialVersionUID = 2720977948538256976L;

			@Override
			public void valueChange(ValueChangeEvent event) {
				rbTipoIntervinienteValueChange(event);
			}
		});

		cmbRiIntervinientes.setInputPrompt("Incautado a:");
		cmbRiIntervinientes.setItemCaptionPropertyId("nombreCompleto");
		cmbRiIntervinientes.setImmediate(true);
		cargaComboPersonaIncautada(OPCION_PERSONA);

		cmbRiIntervinientes.addListener(new ValueChangeListener() {
			private static final long serialVersionUID = 2720977948538256976L;

			@Override
			public void valueChange(ValueChangeEvent event) {
				cmbRiIntervinientesValueChange(event);
			}

		});

		containerTabla();
	}

	private void cargarCmbInterOrganizacion() {
		List<Organizacion> organizaciones = organizacionService.buscar(null);
		BeanItemContainer<Organizacion> containerOrganizacion = new BeanItemContainer<Organizacion>(
				Organizacion.class, organizaciones);
		cmbInterOrganizacion.setContainerDataSource(containerOrganizacion);
		cmbInterOrganizacion.setItemCaptionPropertyId("nombre");

	}

	private void containerTabla() {
		this.container = new IndexedContainer();

		container.addContainerProperty(COLUMN_TIPO_INTERVINIENTE, String.class,
				null);
		container
				.addContainerProperty(COLUMN_INTERVINIENTE, String.class, null);
		container.addContainerProperty(COLUMN_ESTADO_DATO, String.class, null);

		container.addContainerProperty(COLUMN_ORGANIZACION, String.class, null);
		container.addContainerProperty(COLUMN_OCUPACION, String.class, null);
		container.addContainerProperty(COLUMN_FECHA_INTERVENCION, String.class,
				null);
		container.addContainerProperty(COLUMN_SITUACION, String.class, null);
		container.addContainerProperty(COLUMN_ALIAS, String.class, null);
		container.addContainerProperty(COLUMN_EXP_INTERVINIENTE,
				DetExpedientePersona.class, null);

		tblIntervinientes.setContainerDataSource(container);

		tblIntervinientes.setColumnHeader(COLUMN_TIPO_INTERVINIENTE,
				"Tipo Interviniente");
		tblIntervinientes
				.setColumnHeader(COLUMN_INTERVINIENTE, "Interviniente");
		tblIntervinientes.setColumnHeader(COLUMN_ESTADO_DATO, "Est. Dato");

		tblIntervinientes.setColumnHeader(COLUMN_ORGANIZACION, "Organizaci贸n");
		tblIntervinientes.setColumnHeader(COLUMN_OCUPACION, "Ocupaci贸n");
		tblIntervinientes.setColumnHeader(COLUMN_FECHA_INTERVENCION,
				"Fecha Intervenci贸n");
		tblIntervinientes.setColumnHeader(COLUMN_SITUACION, "Siguaci贸n");
		tblIntervinientes.setColumnHeader(COLUMN_ALIAS, "Alias");

		tblIntervinientes.setVisibleColumns(new Object[] {
				COLUMN_TIPO_INTERVINIENTE, COLUMN_INTERVINIENTE,
				COLUMN_ESTADO_DATO, COLUMN_ORGANIZACION, COLUMN_OCUPACION,
				COLUMN_FECHA_INTERVENCION, COLUMN_SITUACION, COLUMN_ALIAS });

		tblIntervinientes.setColumnWidth(COLUMN_TIPO_INTERVINIENTE, 60);
		tblIntervinientes.setColumnWidth(COLUMN_INTERVINIENTE, 150);
		tblIntervinientes.setColumnWidth(COLUMN_ESTADO_DATO, 100);
		tblIntervinientes.setColumnWidth(COLUMN_ORGANIZACION, 100);
		tblIntervinientes.setColumnWidth(COLUMN_OCUPACION, 100);
		tblIntervinientes.setColumnWidth(COLUMN_FECHA_INTERVENCION, 80);
		tblIntervinientes.setColumnWidth(COLUMN_SITUACION, 100);
		tblIntervinientes.setColumnWidth(COLUMN_ALIAS, 100);
	}

	public void cargarIntervinientes() {

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");

		container.removeAllItems();

		List<DetExpedientePersona> intervinientes = expedientePersonaService
				.cargarIntervinientes(expediente);
		for (DetExpedientePersona interviniente : intervinientes) {
			Item item = container.addItem(interviniente.getId());
			item.getItemProperty(COLUMN_TIPO_INTERVINIENTE).setValue(
					interviniente.getInvolucrado() != null ? OPCION_PERSONA
							: OPCION_EMPRESA);
			item.getItemProperty(COLUMN_INTERVINIENTE).setValue(
					interviniente.getInvolucrado() != null ? interviniente
							.getInvolucrado().getNombreCompleto()
							: interviniente.getEmpresaInvolucrada()
									.getRazonSocial());
			item.getItemProperty(COLUMN_ESTADO_DATO).setValue(
					interviniente.getEstadoDato() != null ? interviniente
							.getEstadoDato().getNombre() : StringUtils.EMPTY);
			item.getItemProperty(COLUMN_ORGANIZACION).setValue(
					interviniente.getOrganizacion() != null ? interviniente
							.getOrganizacion().getNombre() : StringUtils.EMPTY);
			item.getItemProperty(COLUMN_OCUPACION).setValue(
					interviniente.getOcupacion() != null ? interviniente
							.getOcupacion().getNombre() : StringUtils.EMPTY);
			item.getItemProperty(COLUMN_FECHA_INTERVENCION).setValue(
					interviniente.getIntervencion() != null ? df
							.format(interviniente.getIntervencion())
							: StringUtils.EMPTY);
			item.getItemProperty(COLUMN_SITUACION).setValue(
					interviniente.getSituacion() != null ? interviniente
							.getSituacion().getNombre() : StringUtils.EMPTY);
			item.getItemProperty(COLUMN_ALIAS).setValue(
					interviniente.getAlias());
			item.getItemProperty(COLUMN_EXP_INTERVINIENTE).setValue(
					interviniente);
		}
	}

	private void cmbRiIntervinientesValueChange(ValueChangeEvent event) {
		limpiarPersonaEmpresa();
		if (event.getProperty().getValue() != null) {
			if (rbTipoInterviniente.getValue().equals(OPCION_PERSONA)) {
				imprimirPersona((Persona) event.getProperty().getValue());
			} else {
				imprimirEmpresa((Empresa) event.getProperty().getValue());
			}
		}
	}

	private void cargarWindowPersona() {

		PanelAgregarPersona pnlAgregarPersona = new PanelAgregarPersona();
		pnlAgregarPersona
				.setPanelAgregarPersonaReponder((PanelAgregarPersonaListener) this);

		final Window window = new Window() {

			private static final long serialVersionUID = 1L;

			protected void close() {
				getApplication().getMainWindow().removeWindow(getWindow());
			}
		};

		window.setCaption("Registrar Persona");
		window.addComponent(pnlAgregarPersona);
		window.setModal(true);
		window.setResizable(false);
		window.setWidth("650px");
		window.setHeight("-1.0");
		getApplication().getMainWindow().addWindow(window);

	}

	private void cargarWindowEmpresa() {
		PanelAgregarEmpresa panelAgregarEmpresa = new PanelAgregarEmpresa();
		panelAgregarEmpresa
				.setPanelAgregarEmpresaListener((PanelAgregarEmpresaListener) this);

		final Window window = new Window() {

			private static final long serialVersionUID = 1L;

			protected void close() {
				getApplication().getMainWindow().removeWindow(getWindow());
			}
		};

		window.setCaption("Registrar Persona");
		window.addComponent(panelAgregarEmpresa);
		window.setModal(true);
		window.setResizable(false);
		window.setWidth("650px");
		window.setHeight("-1.0");
		getApplication().getMainWindow().addWindow(window);
	}

	private void rbTipoIntervinienteValueChange(ValueChangeEvent event) {
		boolean opcion = event.getProperty().getValue().equals(OPCION_PERSONA);
		cmbRiIntervinientes.select(null);
		if (opcion) {
			cargaComboPersonaIncautada(OPCION_PERSONA);
		} else {
			cargaComboPersonaIncautada(OPCION_EMPRESA);
		}
		limpiarPersonaEmpresa();
	}

	private void limpiarPersonaEmpresa() {
		lytDatos.setVisible(false);
		lblDatosInterviniente.setVisible(false);
		lblDatosInterviniente.setValue("");
	}

	private void cargaComboPersonaIncautada(String opcion) {
		if (opcion.equals(OPCION_PERSONA)) {
			listaSeleccionada = OPCION_PERSONA;
			if (lstPersonas == null)
				lstPersonas = personaService.buscar(null);
			cmbRiIntervinientes.setItemCaptionPropertyId("nombreCompleto");
			cmbRiIntervinientes
					.setContainerDataSource(new BeanItemContainer<Persona>(
							Persona.class, lstPersonas));
		} else {
			listaSeleccionada = OPCION_EMPRESA;
			cmbRiIntervinientes.setItemCaptionPropertyId("razonSocial");
			if (lstEmpresas == null)
				lstEmpresas = empresaService.buscar(null);
			cmbRiIntervinientes
					.setContainerDataSource(new BeanItemContainer<Empresa>(
							Empresa.class, lstEmpresas));
		}
	}

	@Override
	public void buttonClick(ClickEvent event) {
		if (event.getButton().equals(btnRIBuscar)) {

			if (rbTipoInterviniente.getValue().equals(OPCION_PERSONA)) {
				cargarWindowPersona();
			} else {
				cargarWindowEmpresa();
			}

		} else if (event.getButton().equals(btnRIAgregar)) {
			buttonClickBtnRIAgregar();
		}

	}

	private void buttonClickBtnRIAgregar() {
		DetExpedientePersona detExpedientePersona = new DetExpedientePersona();
		detExpedientePersona.setExpediente(expediente);
		detExpedientePersona.setAlias((String) txtInterAlias.getValue());
		if (rbTipoInterviniente.getValue().equals(OPCION_PERSONA)) {
			detExpedientePersona.setInvolucrado((Persona) cmbRiIntervinientes
					.getValue());
		} else {
			detExpedientePersona
					.setEmpresaInvolucrada((Empresa) cmbRiIntervinientes
							.getValue());
		}
		detExpedientePersona.setEstadoDato(cmbInterEstadoDato.getValor());
		detExpedientePersona
				.setOrganizacion((Organizacion) cmbInterOrganizacion.getValue());
		detExpedientePersona.setOcupacion(cmbInterOcupacion.getValor());
		detExpedientePersona.setSituacion(cmbInterSituacion.getValor());
		detExpedientePersona.setIntervencion((Date) dtInterFechaInter
				.getValue());

		expedientePersonaService.crear(detExpedientePersona);

		cargarIntervinientes();

		limpiarTodo();

	}

	private void limpiarTodo() {
		rbTipoInterviniente.select(OPCION_PERSONA);

		lstPersonas = personaService.buscar(null);
		rbTipoInterviniente.select(OPCION_PERSONA);
		cargaComboPersonaIncautada(OPCION_PERSONA);
		
		cmbInterEstadoDato.select(null);
		cmbInterOcupacion.select(null);
		cmbInterOrganizacion.select(null);
		cmbInterSituacion.select(null);
		txtInterAlias.setValue(StringUtils.EMPTY);
		dtInterFechaInter.setValue(null);
	}

	@Override
	public void setPersonaPopUp(Persona persona) {

		lstPersonas = personaService.buscar(null);
		rbTipoInterviniente.select(OPCION_PERSONA);
		cargaComboPersonaIncautada(OPCION_PERSONA);

		cmbRiIntervinientes.select(persona);
		imprimirPersona(persona);
	}

	private void imprimirPersona(Persona persona) {
		String plantilla = "<p><b>Tipo y N煤mero de Documento:</b> {0} {1} <b>Nombres Completos:</b> {2} <b>Nacionalidad:</b> {3} <b>Sexo:</b> {4}</p>";

		lytDatos.setVisible(true);
		String html = MessageFormat.format(plantilla, persona
				.getTipoDocumento().getNombre(), // 0
				persona.getNroDocumento(), // 1
				persona.getNombreCompleto(), // 2
				persona.getNacionalidad().getNombre(),// 3
				persona.getSexo());// 4

		lytDatos.setVisible(true);
		lblDatosInterviniente.setVisible(true);
		lblDatosInterviniente.setValue(html);

	}

	@Override
	public void setEmpresaPopUp(Empresa empresa) {
		lstEmpresas = empresaService.buscar(null);
		rbTipoInterviniente.select(OPCION_EMPRESA);
		cargaComboPersonaIncautada(OPCION_EMPRESA);

		cmbRiIntervinientes.select(empresa);
		imprimirEmpresa(empresa);
	}

	private void imprimirEmpresa(Empresa empresa) {

		String plantilla = "<p><b>Ruc:</b> {0} <b>Raz贸n Social:</b> {1} <b>Partida:</b> {2} <b>Tel茅fono:</b> {3}</p>";

		lytDatos.setVisible(true);
		String html = MessageFormat.format(plantilla, empresa.getRuc(), // 0
				empresa.getRazonSocial(), // 1
				empresa.getPartidaRegistral(), // 2
				empresa.getTelefono());// 4

		lytDatos.setVisible(true);
		lblDatosInterviniente.setVisible(true);
		lblDatosInterviniente.setValue(html);
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(false);

		// top-level component properties
		setWidth("100.0%");
		setHeight("-1px");

		// verticalLayout_3
		verticalLayout_3 = buildVerticalLayout_3();
		mainLayout.addComponent(verticalLayout_3);

		return mainLayout;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_3() {
		// common part: create layout
		verticalLayout_3 = new VerticalLayout();
		verticalLayout_3.setImmediate(false);
		verticalLayout_3.setWidth("-1px");
		verticalLayout_3.setHeight("-1px");
		verticalLayout_3.setMargin(true);
		verticalLayout_3.setSpacing(true);

		// horizontalLayout_3
		horizontalLayout_3 = buildHorizontalLayout_3();
		verticalLayout_3.addComponent(horizontalLayout_3);

		// lytDatos
		lytDatos = buildLytDatos();
		verticalLayout_3.addComponent(lytDatos);

		// horizontalLayout_32
		horizontalLayout_32 = buildHorizontalLayout_32();
		verticalLayout_3.addComponent(horizontalLayout_32);

		// horizontalLayout_34
		horizontalLayout_34 = buildHorizontalLayout_34();
		verticalLayout_3.addComponent(horizontalLayout_34);

		// tblIntervinientes
		tblIntervinientes = new Table();
		tblIntervinientes.setImmediate(false);
		tblIntervinientes.setWidth("900px");
		tblIntervinientes.setHeight("350px");
		verticalLayout_3.addComponent(tblIntervinientes);

		return verticalLayout_3;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_3() {
		// common part: create layout
		horizontalLayout_3 = new HorizontalLayout();
		horizontalLayout_3.setImmediate(false);
		horizontalLayout_3.setWidth("-1px");
		horizontalLayout_3.setHeight("-1px");
		horizontalLayout_3.setMargin(false);
		horizontalLayout_3.setSpacing(true);

		// rbTipoInterviniente
		rbTipoInterviniente = new OptionGroup();
		rbTipoInterviniente.setStyleName("horizontal");
		rbTipoInterviniente.setCaption("Tipo de Interviniente");
		rbTipoInterviniente.setImmediate(false);
		rbTipoInterviniente.setWidth("-1px");
		rbTipoInterviniente.setHeight("25px");
		horizontalLayout_3.addComponent(rbTipoInterviniente);

		// cmbRiIntervinientes
		cmbRiIntervinientes = new ComboBox();
		cmbRiIntervinientes.setCaption("Interviniente");
		cmbRiIntervinientes.setImmediate(false);
		cmbRiIntervinientes.setWidth("350px");
		cmbRiIntervinientes.setHeight("-1px");
		horizontalLayout_3.addComponent(cmbRiIntervinientes);

		// btnRIBuscar
		btnRIBuscar = new Button();
		btnRIBuscar.setCaption(" ");
		btnRIBuscar.setImmediate(true);
		btnRIBuscar.setWidth("-1px");
		btnRIBuscar.setHeight("-1px");
		horizontalLayout_3.addComponent(btnRIBuscar);
		horizontalLayout_3.setComponentAlignment(btnRIBuscar, new Alignment(9));

		return horizontalLayout_3;
	}

	@AutoGenerated
	private HorizontalLayout buildLytDatos() {
		// common part: create layout
		lytDatos = new HorizontalLayout();
		lytDatos.setImmediate(false);
		lytDatos.setWidth("-1px");
		lytDatos.setHeight("-1px");
		lytDatos.setMargin(false);
		lytDatos.setSpacing(true);

		// lblDatosInterviniente
		lblDatosInterviniente = new Label();
		lblDatosInterviniente.setImmediate(false);
		lblDatosInterviniente.setWidth("100.0%");
		lblDatosInterviniente.setHeight("100.0%");
		lblDatosInterviniente.setContentMode(3);
		lytDatos.addComponent(lblDatosInterviniente);

		return lytDatos;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_32() {
		// common part: create layout
		horizontalLayout_32 = new HorizontalLayout();
		horizontalLayout_32.setImmediate(false);
		horizontalLayout_32.setWidth("-1px");
		horizontalLayout_32.setHeight("-1px");
		horizontalLayout_32.setMargin(false);
		horizontalLayout_32.setSpacing(true);

		// cmbInterEstadoDato
		cmbInterEstadoDato = new ComboBoxLOVS();
		cmbInterEstadoDato.setCaption("Estado del dato");
		cmbInterEstadoDato.setImmediate(false);
		cmbInterEstadoDato.setWidth("-1px");
		cmbInterEstadoDato.setHeight("-1px");
		horizontalLayout_32.addComponent(cmbInterEstadoDato);

		// cmbInterOrganizacion
		cmbInterOrganizacion = new ComboBox();
		cmbInterOrganizacion.setCaption("Organizaci贸n");
		cmbInterOrganizacion.setImmediate(false);
		cmbInterOrganizacion.setWidth("-1px");
		cmbInterOrganizacion.setHeight("-1px");
		horizontalLayout_32.addComponent(cmbInterOrganizacion);

		// cmbInterOcupacion
		cmbInterOcupacion = new ComboBoxLOVS();
		cmbInterOcupacion.setCaption("Ocupaci贸n");
		cmbInterOcupacion.setImmediate(false);
		cmbInterOcupacion.setWidth("-1px");
		cmbInterOcupacion.setHeight("-1px");
		horizontalLayout_32.addComponent(cmbInterOcupacion);

		// dtInterFechaInter
		dtInterFechaInter = new PopupDateField();
		dtInterFechaInter.setCaption("Fecha Intervenci贸n");
		dtInterFechaInter.setImmediate(false);
		dtInterFechaInter.setWidth("-1px");
		dtInterFechaInter.setHeight("-1px");
		dtInterFechaInter.setInvalidAllowed(false);
		horizontalLayout_32.addComponent(dtInterFechaInter);

		return horizontalLayout_32;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_34() {
		// common part: create layout
		horizontalLayout_34 = new HorizontalLayout();
		horizontalLayout_34.setImmediate(false);
		horizontalLayout_34.setWidth("870px");
		horizontalLayout_34.setHeight("-1px");
		horizontalLayout_34.setMargin(false);
		horizontalLayout_34.setSpacing(true);

		// horizontalLayout_1
		horizontalLayout_1 = buildHorizontalLayout_1();
		horizontalLayout_34.addComponent(horizontalLayout_1);

		// btnRIAgregar
		btnRIAgregar = new Button();
		btnRIAgregar.setCaption("Agregar Interviniente");
		btnRIAgregar.setImmediate(true);
		btnRIAgregar.setWidth("-1px");
		btnRIAgregar.setHeight("-1px");
		horizontalLayout_34.addComponent(btnRIAgregar);
		horizontalLayout_34.setComponentAlignment(btnRIAgregar, new Alignment(
				10));

		return horizontalLayout_34;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_1() {
		// common part: create layout
		horizontalLayout_1 = new HorizontalLayout();
		horizontalLayout_1.setImmediate(false);
		horizontalLayout_1.setWidth("-1px");
		horizontalLayout_1.setHeight("-1px");
		horizontalLayout_1.setMargin(false);
		horizontalLayout_1.setSpacing(true);

		// cmbInterSituacion
		cmbInterSituacion = new ComboBoxLOVS();
		cmbInterSituacion.setCaption("Situaci贸n");
		cmbInterSituacion.setImmediate(false);
		cmbInterSituacion.setWidth("-1px");
		cmbInterSituacion.setHeight("-1px");
		horizontalLayout_1.addComponent(cmbInterSituacion);

		// txtInterAlias
		txtInterAlias = new TextField();
		txtInterAlias.setCaption("Alias");
		txtInterAlias.setImmediate(false);
		txtInterAlias.setWidth("-1px");
		txtInterAlias.setHeight("-1px");
		horizontalLayout_1.addComponent(txtInterAlias);

		return horizontalLayout_1;
	}

}
